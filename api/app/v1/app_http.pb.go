// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.4
// source: api/app/v1/app.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppServiceApply = "/app.v1.AppService/Apply"
const OperationAppServiceDelete = "/app.v1.AppService/Delete"
const OperationAppServiceGetApp = "/app.v1.AppService/GetApp"
const OperationAppServiceGetApps = "/app.v1.AppService/GetApps"
const OperationAppServiceSave = "/app.v1.AppService/Save"

type AppServiceHTTPServer interface {
	Apply(context.Context, *AppID) (*Msg, error)
	Delete(context.Context, *AppID) (*Msg, error)
	GetApp(context.Context, *AppID) (*App, error)
	GetApps(context.Context, *ClusterID) (*Apps, error)
	Save(context.Context, *App) (*Msg, error)
}

func RegisterAppServiceHTTPServer(s *http.Server, srv AppServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/app/v1/{clusterID}/get", _AppService_GetApps0_HTTP_Handler(srv))
	r.GET("/app/v1/{clusterID}/get/{appID}", _AppService_GetApp0_HTTP_Handler(srv))
	r.PUT("/app/v1/save", _AppService_Save1_HTTP_Handler(srv))
	r.PUT("/app/v1/{clusterID}/apply/{appID}", _AppService_Apply1_HTTP_Handler(srv))
	r.DELETE("/app/v1/{clusterID}/apply/{appID}", _AppService_Delete1_HTTP_Handler(srv))
}

func _AppService_GetApps0_HTTP_Handler(srv AppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppServiceGetApps)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApps(ctx, req.(*ClusterID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Apps)
		return ctx.Result(200, reply)
	}
}

func _AppService_GetApp0_HTTP_Handler(srv AppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppServiceGetApp)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApp(ctx, req.(*AppID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*App)
		return ctx.Result(200, reply)
	}
}

func _AppService_Save1_HTTP_Handler(srv AppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in App
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppServiceSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Save(ctx, req.(*App))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _AppService_Apply1_HTTP_Handler(srv AppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppServiceApply)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Apply(ctx, req.(*AppID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _AppService_Delete1_HTTP_Handler(srv AppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppServiceDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*AppID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

type AppServiceHTTPClient interface {
	Apply(ctx context.Context, req *AppID, opts ...http.CallOption) (rsp *Msg, err error)
	Delete(ctx context.Context, req *AppID, opts ...http.CallOption) (rsp *Msg, err error)
	GetApp(ctx context.Context, req *AppID, opts ...http.CallOption) (rsp *App, err error)
	GetApps(ctx context.Context, req *ClusterID, opts ...http.CallOption) (rsp *Apps, err error)
	Save(ctx context.Context, req *App, opts ...http.CallOption) (rsp *Msg, err error)
}

type AppServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAppServiceHTTPClient(client *http.Client) AppServiceHTTPClient {
	return &AppServiceHTTPClientImpl{client}
}

func (c *AppServiceHTTPClientImpl) Apply(ctx context.Context, in *AppID, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/app/v1/{clusterID}/apply/{appID}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppServiceApply))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppServiceHTTPClientImpl) Delete(ctx context.Context, in *AppID, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/app/v1/{clusterID}/apply/{appID}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppServiceDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppServiceHTTPClientImpl) GetApp(ctx context.Context, in *AppID, opts ...http.CallOption) (*App, error) {
	var out App
	pattern := "/app/v1/{clusterID}/get/{appID}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppServiceGetApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppServiceHTTPClientImpl) GetApps(ctx context.Context, in *ClusterID, opts ...http.CallOption) (*Apps, error) {
	var out Apps
	pattern := "/app/v1/{clusterID}/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppServiceGetApps))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppServiceHTTPClientImpl) Save(ctx context.Context, in *App, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/app/v1/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppServiceSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
