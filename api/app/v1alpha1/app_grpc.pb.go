// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/app/v1alpha1/app.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppInterface_Ping_FullMethodName               = "/app.v1alpha1.AppInterface/Ping"
	AppInterface_UploadApp_FullMethodName          = "/app.v1alpha1.AppInterface/UploadApp"
	AppInterface_UploadAppIcon_FullMethodName      = "/app.v1alpha1.AppInterface/UploadAppIcon"
	AppInterface_Save_FullMethodName               = "/app.v1alpha1.AppInterface/Save"
	AppInterface_Get_FullMethodName                = "/app.v1alpha1.AppInterface/Get"
	AppInterface_List_FullMethodName               = "/app.v1alpha1.AppInterface/List"
	AppInterface_Delete_FullMethodName             = "/app.v1alpha1.AppInterface/Delete"
	AppInterface_CreateAppType_FullMethodName      = "/app.v1alpha1.AppInterface/CreateAppType"
	AppInterface_ListAppType_FullMethodName        = "/app.v1alpha1.AppInterface/ListAppType"
	AppInterface_DeleteAppType_FullMethodName      = "/app.v1alpha1.AppInterface/DeleteAppType"
	AppInterface_AppTest_FullMethodName            = "/app.v1alpha1.AppInterface/AppTest"
	AppInterface_GetAppDeployed_FullMethodName     = "/app.v1alpha1.AppInterface/GetAppDeployed"
	AppInterface_DeployApp_FullMethodName          = "/app.v1alpha1.AppInterface/DeployApp"
	AppInterface_ListDeployedApp_FullMethodName    = "/app.v1alpha1.AppInterface/ListDeployedApp"
	AppInterface_StopApp_FullMethodName            = "/app.v1alpha1.AppInterface/StopApp"
	AppInterface_DeleteDeployedApp_FullMethodName  = "/app.v1alpha1.AppInterface/DeleteDeployedApp"
	AppInterface_SaveRepo_FullMethodName           = "/app.v1alpha1.AppInterface/SaveRepo"
	AppInterface_ListRepo_FullMethodName           = "/app.v1alpha1.AppInterface/ListRepo"
	AppInterface_DeleteRepo_FullMethodName         = "/app.v1alpha1.AppInterface/DeleteRepo"
	AppInterface_GetAppsByRepo_FullMethodName      = "/app.v1alpha1.AppInterface/GetAppsByRepo"
	AppInterface_GetAppDetailByRepo_FullMethodName = "/app.v1alpha1.AppInterface/GetAppDetailByRepo"
)

// AppInterfaceClient is the client API for AppInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppInterfaceClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Msg, error)
	UploadApp(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*App, error)
	UploadAppIcon(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error)
	Save(ctx context.Context, in *App, opts ...grpc.CallOption) (*Msg, error)
	Get(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*App, error)
	List(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*AppList, error)
	Delete(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*Msg, error)
	CreateAppType(ctx context.Context, in *AppType, opts ...grpc.CallOption) (*Msg, error)
	ListAppType(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppTypeList, error)
	DeleteAppType(ctx context.Context, in *AppTypeReq, opts ...grpc.CallOption) (*Msg, error)
	AppTest(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*DeployApp, error)
	GetAppDeployed(ctx context.Context, in *DeployApp, opts ...grpc.CallOption) (*DeployApp, error)
	DeployApp(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*DeployApp, error)
	ListDeployedApp(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*DeployAppList, error)
	StopApp(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*Msg, error)
	DeleteDeployedApp(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*Msg, error)
	SaveRepo(ctx context.Context, in *AppHelmRepo, opts ...grpc.CallOption) (*Msg, error)
	ListRepo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppHelmRepoList, error)
	DeleteRepo(ctx context.Context, in *AppHelmRepoReq, opts ...grpc.CallOption) (*Msg, error)
	GetAppsByRepo(ctx context.Context, in *AppHelmRepoReq, opts ...grpc.CallOption) (*AppList, error)
	GetAppDetailByRepo(ctx context.Context, in *AppHelmRepoReq, opts ...grpc.CallOption) (*App, error)
}

type appInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppInterfaceClient(cc grpc.ClientConnInterface) AppInterfaceClient {
	return &appInterfaceClient{cc}
}

func (c *appInterfaceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, AppInterface_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) UploadApp(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppInterface_UploadApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) UploadAppIcon(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error) {
	out := new(FileUploadResponse)
	err := c.cc.Invoke(ctx, AppInterface_UploadAppIcon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) Save(ctx context.Context, in *App, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, AppInterface_Save_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) Get(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppInterface_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) List(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := c.cc.Invoke(ctx, AppInterface_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) Delete(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, AppInterface_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) CreateAppType(ctx context.Context, in *AppType, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, AppInterface_CreateAppType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) ListAppType(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppTypeList, error) {
	out := new(AppTypeList)
	err := c.cc.Invoke(ctx, AppInterface_ListAppType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) DeleteAppType(ctx context.Context, in *AppTypeReq, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, AppInterface_DeleteAppType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) AppTest(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*DeployApp, error) {
	out := new(DeployApp)
	err := c.cc.Invoke(ctx, AppInterface_AppTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) GetAppDeployed(ctx context.Context, in *DeployApp, opts ...grpc.CallOption) (*DeployApp, error) {
	out := new(DeployApp)
	err := c.cc.Invoke(ctx, AppInterface_GetAppDeployed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) DeployApp(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*DeployApp, error) {
	out := new(DeployApp)
	err := c.cc.Invoke(ctx, AppInterface_DeployApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) ListDeployedApp(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*DeployAppList, error) {
	out := new(DeployAppList)
	err := c.cc.Invoke(ctx, AppInterface_ListDeployedApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) StopApp(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, AppInterface_StopApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) DeleteDeployedApp(ctx context.Context, in *DeployAppReq, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, AppInterface_DeleteDeployedApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) SaveRepo(ctx context.Context, in *AppHelmRepo, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, AppInterface_SaveRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) ListRepo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppHelmRepoList, error) {
	out := new(AppHelmRepoList)
	err := c.cc.Invoke(ctx, AppInterface_ListRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) DeleteRepo(ctx context.Context, in *AppHelmRepoReq, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, AppInterface_DeleteRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) GetAppsByRepo(ctx context.Context, in *AppHelmRepoReq, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := c.cc.Invoke(ctx, AppInterface_GetAppsByRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInterfaceClient) GetAppDetailByRepo(ctx context.Context, in *AppHelmRepoReq, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppInterface_GetAppDetailByRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppInterfaceServer is the server API for AppInterface service.
// All implementations must embed UnimplementedAppInterfaceServer
// for forward compatibility
type AppInterfaceServer interface {
	Ping(context.Context, *emptypb.Empty) (*Msg, error)
	UploadApp(context.Context, *FileUploadRequest) (*App, error)
	UploadAppIcon(context.Context, *FileUploadRequest) (*FileUploadResponse, error)
	Save(context.Context, *App) (*Msg, error)
	Get(context.Context, *AppReq) (*App, error)
	List(context.Context, *AppReq) (*AppList, error)
	Delete(context.Context, *AppReq) (*Msg, error)
	CreateAppType(context.Context, *AppType) (*Msg, error)
	ListAppType(context.Context, *emptypb.Empty) (*AppTypeList, error)
	DeleteAppType(context.Context, *AppTypeReq) (*Msg, error)
	AppTest(context.Context, *DeployAppReq) (*DeployApp, error)
	GetAppDeployed(context.Context, *DeployApp) (*DeployApp, error)
	DeployApp(context.Context, *DeployAppReq) (*DeployApp, error)
	ListDeployedApp(context.Context, *DeployAppReq) (*DeployAppList, error)
	StopApp(context.Context, *DeployAppReq) (*Msg, error)
	DeleteDeployedApp(context.Context, *DeployAppReq) (*Msg, error)
	SaveRepo(context.Context, *AppHelmRepo) (*Msg, error)
	ListRepo(context.Context, *emptypb.Empty) (*AppHelmRepoList, error)
	DeleteRepo(context.Context, *AppHelmRepoReq) (*Msg, error)
	GetAppsByRepo(context.Context, *AppHelmRepoReq) (*AppList, error)
	GetAppDetailByRepo(context.Context, *AppHelmRepoReq) (*App, error)
	mustEmbedUnimplementedAppInterfaceServer()
}

// UnimplementedAppInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedAppInterfaceServer struct {
}

func (UnimplementedAppInterfaceServer) Ping(context.Context, *emptypb.Empty) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAppInterfaceServer) UploadApp(context.Context, *FileUploadRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadApp not implemented")
}
func (UnimplementedAppInterfaceServer) UploadAppIcon(context.Context, *FileUploadRequest) (*FileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAppIcon not implemented")
}
func (UnimplementedAppInterfaceServer) Save(context.Context, *App) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedAppInterfaceServer) Get(context.Context, *AppReq) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppInterfaceServer) List(context.Context, *AppReq) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAppInterfaceServer) Delete(context.Context, *AppReq) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppInterfaceServer) CreateAppType(context.Context, *AppType) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppType not implemented")
}
func (UnimplementedAppInterfaceServer) ListAppType(context.Context, *emptypb.Empty) (*AppTypeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppType not implemented")
}
func (UnimplementedAppInterfaceServer) DeleteAppType(context.Context, *AppTypeReq) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppType not implemented")
}
func (UnimplementedAppInterfaceServer) AppTest(context.Context, *DeployAppReq) (*DeployApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppTest not implemented")
}
func (UnimplementedAppInterfaceServer) GetAppDeployed(context.Context, *DeployApp) (*DeployApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDeployed not implemented")
}
func (UnimplementedAppInterfaceServer) DeployApp(context.Context, *DeployAppReq) (*DeployApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployApp not implemented")
}
func (UnimplementedAppInterfaceServer) ListDeployedApp(context.Context, *DeployAppReq) (*DeployAppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployedApp not implemented")
}
func (UnimplementedAppInterfaceServer) StopApp(context.Context, *DeployAppReq) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopApp not implemented")
}
func (UnimplementedAppInterfaceServer) DeleteDeployedApp(context.Context, *DeployAppReq) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployedApp not implemented")
}
func (UnimplementedAppInterfaceServer) SaveRepo(context.Context, *AppHelmRepo) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRepo not implemented")
}
func (UnimplementedAppInterfaceServer) ListRepo(context.Context, *emptypb.Empty) (*AppHelmRepoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepo not implemented")
}
func (UnimplementedAppInterfaceServer) DeleteRepo(context.Context, *AppHelmRepoReq) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (UnimplementedAppInterfaceServer) GetAppsByRepo(context.Context, *AppHelmRepoReq) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppsByRepo not implemented")
}
func (UnimplementedAppInterfaceServer) GetAppDetailByRepo(context.Context, *AppHelmRepoReq) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDetailByRepo not implemented")
}
func (UnimplementedAppInterfaceServer) mustEmbedUnimplementedAppInterfaceServer() {}

// UnsafeAppInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppInterfaceServer will
// result in compilation errors.
type UnsafeAppInterfaceServer interface {
	mustEmbedUnimplementedAppInterfaceServer()
}

func RegisterAppInterfaceServer(s grpc.ServiceRegistrar, srv AppInterfaceServer) {
	s.RegisterService(&AppInterface_ServiceDesc, srv)
}

func _AppInterface_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_UploadApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).UploadApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_UploadApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).UploadApp(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_UploadAppIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).UploadAppIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_UploadAppIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).UploadAppIcon(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).Save(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).Get(ctx, req.(*AppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).List(ctx, req.(*AppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).Delete(ctx, req.(*AppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_CreateAppType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).CreateAppType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_CreateAppType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).CreateAppType(ctx, req.(*AppType))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_ListAppType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).ListAppType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_ListAppType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).ListAppType(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_DeleteAppType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).DeleteAppType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_DeleteAppType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).DeleteAppType(ctx, req.(*AppTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_AppTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).AppTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_AppTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).AppTest(ctx, req.(*DeployAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_GetAppDeployed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).GetAppDeployed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_GetAppDeployed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).GetAppDeployed(ctx, req.(*DeployApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_DeployApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).DeployApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_DeployApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).DeployApp(ctx, req.(*DeployAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_ListDeployedApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).ListDeployedApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_ListDeployedApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).ListDeployedApp(ctx, req.(*DeployAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_StopApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).StopApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_StopApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).StopApp(ctx, req.(*DeployAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_DeleteDeployedApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).DeleteDeployedApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_DeleteDeployedApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).DeleteDeployedApp(ctx, req.(*DeployAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_SaveRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppHelmRepo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).SaveRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_SaveRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).SaveRepo(ctx, req.(*AppHelmRepo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_ListRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).ListRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_ListRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).ListRepo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppHelmRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_DeleteRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).DeleteRepo(ctx, req.(*AppHelmRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_GetAppsByRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppHelmRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).GetAppsByRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_GetAppsByRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).GetAppsByRepo(ctx, req.(*AppHelmRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInterface_GetAppDetailByRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppHelmRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInterfaceServer).GetAppDetailByRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppInterface_GetAppDetailByRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInterfaceServer).GetAppDetailByRepo(ctx, req.(*AppHelmRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppInterface_ServiceDesc is the grpc.ServiceDesc for AppInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.v1alpha1.AppInterface",
	HandlerType: (*AppInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AppInterface_Ping_Handler,
		},
		{
			MethodName: "UploadApp",
			Handler:    _AppInterface_UploadApp_Handler,
		},
		{
			MethodName: "UploadAppIcon",
			Handler:    _AppInterface_UploadAppIcon_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _AppInterface_Save_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AppInterface_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AppInterface_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppInterface_Delete_Handler,
		},
		{
			MethodName: "CreateAppType",
			Handler:    _AppInterface_CreateAppType_Handler,
		},
		{
			MethodName: "ListAppType",
			Handler:    _AppInterface_ListAppType_Handler,
		},
		{
			MethodName: "DeleteAppType",
			Handler:    _AppInterface_DeleteAppType_Handler,
		},
		{
			MethodName: "AppTest",
			Handler:    _AppInterface_AppTest_Handler,
		},
		{
			MethodName: "GetAppDeployed",
			Handler:    _AppInterface_GetAppDeployed_Handler,
		},
		{
			MethodName: "DeployApp",
			Handler:    _AppInterface_DeployApp_Handler,
		},
		{
			MethodName: "ListDeployedApp",
			Handler:    _AppInterface_ListDeployedApp_Handler,
		},
		{
			MethodName: "StopApp",
			Handler:    _AppInterface_StopApp_Handler,
		},
		{
			MethodName: "DeleteDeployedApp",
			Handler:    _AppInterface_DeleteDeployedApp_Handler,
		},
		{
			MethodName: "SaveRepo",
			Handler:    _AppInterface_SaveRepo_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _AppInterface_ListRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _AppInterface_DeleteRepo_Handler,
		},
		{
			MethodName: "GetAppsByRepo",
			Handler:    _AppInterface_GetAppsByRepo_Handler,
		},
		{
			MethodName: "GetAppDetailByRepo",
			Handler:    _AppInterface_GetAppDetailByRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/app/v1alpha1/app.proto",
}
