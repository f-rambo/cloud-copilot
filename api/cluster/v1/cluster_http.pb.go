// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.4
// source: api/cluster/v1/cluster.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClusterDeployCluster = "/cluster.v1.Cluster/DeployCluster"
const OperationClusterDestroyCluster = "/cluster.v1.Cluster/DestroyCluster"
const OperationClusterGetCluster = "/cluster.v1.Cluster/GetCluster"
const OperationClusterGetClusterConfig = "/cluster.v1.Cluster/GetClusterConfig"
const OperationClusterSaveCluster = "/cluster.v1.Cluster/SaveCluster"
const OperationClusterSaveClusterConfig = "/cluster.v1.Cluster/SaveClusterConfig"
const OperationClusterSetClusterAuth = "/cluster.v1.Cluster/SetClusterAuth"
const OperationClusterSetUpClusterTool = "/cluster.v1.Cluster/SetUpClusterTool"
const OperationClusterSyncConfigCluster = "/cluster.v1.Cluster/SyncConfigCluster"

type ClusterHTTPServer interface {
	DeployCluster(context.Context, *emptypb.Empty) (*Msg, error)
	DestroyCluster(context.Context, *emptypb.Empty) (*Msg, error)
	GetCluster(context.Context, *emptypb.Empty) (*Servers, error)
	GetClusterConfig(context.Context, *GetClusterConfigRequest) (*GetClusterConfigResponse, error)
	SaveCluster(context.Context, *Servers) (*Msg, error)
	SaveClusterConfig(context.Context, *SaveClusterConfigRequest) (*Msg, error)
	SetClusterAuth(context.Context, *emptypb.Empty) (*Msg, error)
	SetUpClusterTool(context.Context, *emptypb.Empty) (*Msg, error)
	SyncConfigCluster(context.Context, *emptypb.Empty) (*Msg, error)
}

func RegisterClusterHTTPServer(s *http.Server, srv ClusterHTTPServer) {
	r := s.Route("/")
	r.POST("/cluster/v1/deploy", _Cluster_DeployCluster0_HTTP_Handler(srv))
	r.POST("/cluster/v1/destroy", _Cluster_DestroyCluster0_HTTP_Handler(srv))
	r.PUT("/cluster/v1/sync/config", _Cluster_SyncConfigCluster0_HTTP_Handler(srv))
	r.PUT("/cluster/v1/save/cluster/config", _Cluster_SaveClusterConfig0_HTTP_Handler(srv))
	r.GET("/cluster/v1/cluster/config", _Cluster_GetClusterConfig0_HTTP_Handler(srv))
	r.GET("/cluster/v1/get", _Cluster_GetCluster0_HTTP_Handler(srv))
	r.PUT("/cluster/v1/save", _Cluster_SaveCluster0_HTTP_Handler(srv))
	r.POST("/cluster/v1/set/auth", _Cluster_SetClusterAuth0_HTTP_Handler(srv))
	r.POST("/cluster/v1/setup/tool", _Cluster_SetUpClusterTool0_HTTP_Handler(srv))
}

func _Cluster_DeployCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterDeployCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeployCluster(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _Cluster_DestroyCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterDestroyCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DestroyCluster(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _Cluster_SyncConfigCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterSyncConfigCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SyncConfigCluster(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _Cluster_SaveClusterConfig0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveClusterConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterSaveClusterConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveClusterConfig(ctx, req.(*SaveClusterConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _Cluster_GetClusterConfig0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClusterConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterGetClusterConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClusterConfig(ctx, req.(*GetClusterConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClusterConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _Cluster_GetCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterGetCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCluster(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Servers)
		return ctx.Result(200, reply)
	}
}

func _Cluster_SaveCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Servers
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterSaveCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveCluster(ctx, req.(*Servers))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _Cluster_SetClusterAuth0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterSetClusterAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetClusterAuth(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _Cluster_SetUpClusterTool0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterSetUpClusterTool)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUpClusterTool(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

type ClusterHTTPClient interface {
	DeployCluster(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Msg, err error)
	DestroyCluster(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Msg, err error)
	GetCluster(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Servers, err error)
	GetClusterConfig(ctx context.Context, req *GetClusterConfigRequest, opts ...http.CallOption) (rsp *GetClusterConfigResponse, err error)
	SaveCluster(ctx context.Context, req *Servers, opts ...http.CallOption) (rsp *Msg, err error)
	SaveClusterConfig(ctx context.Context, req *SaveClusterConfigRequest, opts ...http.CallOption) (rsp *Msg, err error)
	SetClusterAuth(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Msg, err error)
	SetUpClusterTool(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Msg, err error)
	SyncConfigCluster(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Msg, err error)
}

type ClusterHTTPClientImpl struct {
	cc *http.Client
}

func NewClusterHTTPClient(client *http.Client) ClusterHTTPClient {
	return &ClusterHTTPClientImpl{client}
}

func (c *ClusterHTTPClientImpl) DeployCluster(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/cluster/v1/deploy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterDeployCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterHTTPClientImpl) DestroyCluster(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/cluster/v1/destroy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterDestroyCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterHTTPClientImpl) GetCluster(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Servers, error) {
	var out Servers
	pattern := "/cluster/v1/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterGetCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterHTTPClientImpl) GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, opts ...http.CallOption) (*GetClusterConfigResponse, error) {
	var out GetClusterConfigResponse
	pattern := "/cluster/v1/cluster/config"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterGetClusterConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterHTTPClientImpl) SaveCluster(ctx context.Context, in *Servers, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/cluster/v1/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterSaveCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterHTTPClientImpl) SaveClusterConfig(ctx context.Context, in *SaveClusterConfigRequest, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/cluster/v1/save/cluster/config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterSaveClusterConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterHTTPClientImpl) SetClusterAuth(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/cluster/v1/set/auth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterSetClusterAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterHTTPClientImpl) SetUpClusterTool(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/cluster/v1/setup/tool"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterSetUpClusterTool))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterHTTPClientImpl) SyncConfigCluster(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/cluster/v1/sync/config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterSyncConfigCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
