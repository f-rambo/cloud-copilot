// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/cluster/v1alpha1/cluster.proto

package v1alpha1

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClusterInterface_Ping_FullMethodName                = "/cluster.v1alpha1.ClusterInterface/Ping"
	ClusterInterface_GetClusterProviders_FullMethodName = "/cluster.v1alpha1.ClusterInterface/GetClusterProviders"
	ClusterInterface_GetClusterStatuses_FullMethodName  = "/cluster.v1alpha1.ClusterInterface/GetClusterStatuses"
	ClusterInterface_GetClusterLevels_FullMethodName    = "/cluster.v1alpha1.ClusterInterface/GetClusterLevels"
	ClusterInterface_GetNodeRoles_FullMethodName        = "/cluster.v1alpha1.ClusterInterface/GetNodeRoles"
	ClusterInterface_GetNodeStatuses_FullMethodName     = "/cluster.v1alpha1.ClusterInterface/GetNodeStatuses"
	ClusterInterface_GetNodeGroupTypes_FullMethodName   = "/cluster.v1alpha1.ClusterInterface/GetNodeGroupTypes"
	ClusterInterface_GetResourceTypes_FullMethodName    = "/cluster.v1alpha1.ClusterInterface/GetResourceTypes"
	ClusterInterface_Get_FullMethodName                 = "/cluster.v1alpha1.ClusterInterface/Get"
	ClusterInterface_GetClustersByIds_FullMethodName    = "/cluster.v1alpha1.ClusterInterface/GetClustersByIds"
	ClusterInterface_Save_FullMethodName                = "/cluster.v1alpha1.ClusterInterface/Save"
	ClusterInterface_List_FullMethodName                = "/cluster.v1alpha1.ClusterInterface/List"
	ClusterInterface_Delete_FullMethodName              = "/cluster.v1alpha1.ClusterInterface/Delete"
	ClusterInterface_Start_FullMethodName               = "/cluster.v1alpha1.ClusterInterface/Start"
	ClusterInterface_Stop_FullMethodName                = "/cluster.v1alpha1.ClusterInterface/Stop"
	ClusterInterface_GetRegions_FullMethodName          = "/cluster.v1alpha1.ClusterInterface/GetRegions"
)

// ClusterInterfaceClient is the client API for ClusterInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ClusterInterface defines the gRPC service for managing clusters.
type ClusterInterfaceClient interface {
	// Ping the cluster service.
	// @mcp: reject
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.Msg, error)
	// GetClusterProviders returns the available cluster providers.
	// @mcp: reject
	GetClusterProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterProviders, error)
	// @mcp: reject
	GetClusterStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterStatuses, error)
	// @mcp: reject
	GetClusterLevels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterLevels, error)
	// @mcp: reject
	GetNodeRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeRoles, error)
	// @mcp: reject
	GetNodeStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeStatuses, error)
	// @mcp: reject
	GetNodeGroupTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeGroupTypes, error)
	// @mcp: reject
	GetResourceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResourceTypes, error)
	// Get cluster by id.
	Get(ctx context.Context, in *ClusterIdArgs, opts ...grpc.CallOption) (*Cluster, error)
	// Get clusters by ids.
	GetClustersByIds(ctx context.Context, in *ClusterIdsArgs, opts ...grpc.CallOption) (*ClusterList, error)
	// Save cluster.
	Save(ctx context.Context, in *ClusterSaveArgs, opts ...grpc.CallOption) (*Cluster, error)
	// List returns a list of clusters based on the provided arguments.
	List(ctx context.Context, in *ClusterListArgs, opts ...grpc.CallOption) (*ClusterList, error)
	// Delete cluster.
	Delete(ctx context.Context, in *ClusterIdArgs, opts ...grpc.CallOption) (*common.Msg, error)
	// Start cluster: create cluster and start all nodes
	Start(ctx context.Context, in *ClusterIdArgs, opts ...grpc.CallOption) (*common.Msg, error)
	// Stop cluster: stop all nodes and delete cluster
	Stop(ctx context.Context, in *ClusterIdArgs, opts ...grpc.CallOption) (*common.Msg, error)
	// Get cluster regions
	GetRegions(ctx context.Context, in *ClusterRegionArgs, opts ...grpc.CallOption) (*Regions, error)
}

type clusterInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterInterfaceClient(cc grpc.ClientConnInterface) ClusterInterfaceClient {
	return &clusterInterfaceClient{cc}
}

func (c *clusterInterfaceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ClusterInterface_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) GetClusterProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterProviders, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterProviders)
	err := c.cc.Invoke(ctx, ClusterInterface_GetClusterProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) GetClusterStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterStatuses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterStatuses)
	err := c.cc.Invoke(ctx, ClusterInterface_GetClusterStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) GetClusterLevels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterLevels, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterLevels)
	err := c.cc.Invoke(ctx, ClusterInterface_GetClusterLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) GetNodeRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeRoles, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeRoles)
	err := c.cc.Invoke(ctx, ClusterInterface_GetNodeRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) GetNodeStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeStatuses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeStatuses)
	err := c.cc.Invoke(ctx, ClusterInterface_GetNodeStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) GetNodeGroupTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeGroupTypes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeGroupTypes)
	err := c.cc.Invoke(ctx, ClusterInterface_GetNodeGroupTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) GetResourceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResourceTypes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceTypes)
	err := c.cc.Invoke(ctx, ClusterInterface_GetResourceTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) Get(ctx context.Context, in *ClusterIdArgs, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, ClusterInterface_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) GetClustersByIds(ctx context.Context, in *ClusterIdsArgs, opts ...grpc.CallOption) (*ClusterList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterList)
	err := c.cc.Invoke(ctx, ClusterInterface_GetClustersByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) Save(ctx context.Context, in *ClusterSaveArgs, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, ClusterInterface_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) List(ctx context.Context, in *ClusterListArgs, opts ...grpc.CallOption) (*ClusterList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterList)
	err := c.cc.Invoke(ctx, ClusterInterface_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) Delete(ctx context.Context, in *ClusterIdArgs, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ClusterInterface_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) Start(ctx context.Context, in *ClusterIdArgs, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ClusterInterface_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) Stop(ctx context.Context, in *ClusterIdArgs, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ClusterInterface_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInterfaceClient) GetRegions(ctx context.Context, in *ClusterRegionArgs, opts ...grpc.CallOption) (*Regions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Regions)
	err := c.cc.Invoke(ctx, ClusterInterface_GetRegions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterInterfaceServer is the server API for ClusterInterface service.
// All implementations must embed UnimplementedClusterInterfaceServer
// for forward compatibility.
//
// ClusterInterface defines the gRPC service for managing clusters.
type ClusterInterfaceServer interface {
	// Ping the cluster service.
	// @mcp: reject
	Ping(context.Context, *emptypb.Empty) (*common.Msg, error)
	// GetClusterProviders returns the available cluster providers.
	// @mcp: reject
	GetClusterProviders(context.Context, *emptypb.Empty) (*ClusterProviders, error)
	// @mcp: reject
	GetClusterStatuses(context.Context, *emptypb.Empty) (*ClusterStatuses, error)
	// @mcp: reject
	GetClusterLevels(context.Context, *emptypb.Empty) (*ClusterLevels, error)
	// @mcp: reject
	GetNodeRoles(context.Context, *emptypb.Empty) (*NodeRoles, error)
	// @mcp: reject
	GetNodeStatuses(context.Context, *emptypb.Empty) (*NodeStatuses, error)
	// @mcp: reject
	GetNodeGroupTypes(context.Context, *emptypb.Empty) (*NodeGroupTypes, error)
	// @mcp: reject
	GetResourceTypes(context.Context, *emptypb.Empty) (*ResourceTypes, error)
	// Get cluster by id.
	Get(context.Context, *ClusterIdArgs) (*Cluster, error)
	// Get clusters by ids.
	GetClustersByIds(context.Context, *ClusterIdsArgs) (*ClusterList, error)
	// Save cluster.
	Save(context.Context, *ClusterSaveArgs) (*Cluster, error)
	// List returns a list of clusters based on the provided arguments.
	List(context.Context, *ClusterListArgs) (*ClusterList, error)
	// Delete cluster.
	Delete(context.Context, *ClusterIdArgs) (*common.Msg, error)
	// Start cluster: create cluster and start all nodes
	Start(context.Context, *ClusterIdArgs) (*common.Msg, error)
	// Stop cluster: stop all nodes and delete cluster
	Stop(context.Context, *ClusterIdArgs) (*common.Msg, error)
	// Get cluster regions
	GetRegions(context.Context, *ClusterRegionArgs) (*Regions, error)
	mustEmbedUnimplementedClusterInterfaceServer()
}

// UnimplementedClusterInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterInterfaceServer struct{}

func (UnimplementedClusterInterfaceServer) Ping(context.Context, *emptypb.Empty) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedClusterInterfaceServer) GetClusterProviders(context.Context, *emptypb.Empty) (*ClusterProviders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterProviders not implemented")
}
func (UnimplementedClusterInterfaceServer) GetClusterStatuses(context.Context, *emptypb.Empty) (*ClusterStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStatuses not implemented")
}
func (UnimplementedClusterInterfaceServer) GetClusterLevels(context.Context, *emptypb.Empty) (*ClusterLevels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterLevels not implemented")
}
func (UnimplementedClusterInterfaceServer) GetNodeRoles(context.Context, *emptypb.Empty) (*NodeRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRoles not implemented")
}
func (UnimplementedClusterInterfaceServer) GetNodeStatuses(context.Context, *emptypb.Empty) (*NodeStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStatuses not implemented")
}
func (UnimplementedClusterInterfaceServer) GetNodeGroupTypes(context.Context, *emptypb.Empty) (*NodeGroupTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroupTypes not implemented")
}
func (UnimplementedClusterInterfaceServer) GetResourceTypes(context.Context, *emptypb.Empty) (*ResourceTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceTypes not implemented")
}
func (UnimplementedClusterInterfaceServer) Get(context.Context, *ClusterIdArgs) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedClusterInterfaceServer) GetClustersByIds(context.Context, *ClusterIdsArgs) (*ClusterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClustersByIds not implemented")
}
func (UnimplementedClusterInterfaceServer) Save(context.Context, *ClusterSaveArgs) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedClusterInterfaceServer) List(context.Context, *ClusterListArgs) (*ClusterList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClusterInterfaceServer) Delete(context.Context, *ClusterIdArgs) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClusterInterfaceServer) Start(context.Context, *ClusterIdArgs) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedClusterInterfaceServer) Stop(context.Context, *ClusterIdArgs) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedClusterInterfaceServer) GetRegions(context.Context, *ClusterRegionArgs) (*Regions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (UnimplementedClusterInterfaceServer) mustEmbedUnimplementedClusterInterfaceServer() {}
func (UnimplementedClusterInterfaceServer) testEmbeddedByValue()                          {}

// UnsafeClusterInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterInterfaceServer will
// result in compilation errors.
type UnsafeClusterInterfaceServer interface {
	mustEmbedUnimplementedClusterInterfaceServer()
}

func RegisterClusterInterfaceServer(s grpc.ServiceRegistrar, srv ClusterInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedClusterInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterInterface_ServiceDesc, srv)
}

func _ClusterInterface_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_GetClusterProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).GetClusterProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_GetClusterProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).GetClusterProviders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_GetClusterStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).GetClusterStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_GetClusterStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).GetClusterStatuses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_GetClusterLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).GetClusterLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_GetClusterLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).GetClusterLevels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_GetNodeRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).GetNodeRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_GetNodeRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).GetNodeRoles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_GetNodeStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).GetNodeStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_GetNodeStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).GetNodeStatuses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_GetNodeGroupTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).GetNodeGroupTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_GetNodeGroupTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).GetNodeGroupTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_GetResourceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).GetResourceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_GetResourceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).GetResourceTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIdArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).Get(ctx, req.(*ClusterIdArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_GetClustersByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIdsArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).GetClustersByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_GetClustersByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).GetClustersByIds(ctx, req.(*ClusterIdsArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterSaveArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).Save(ctx, req.(*ClusterSaveArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).List(ctx, req.(*ClusterListArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIdArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).Delete(ctx, req.(*ClusterIdArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIdArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).Start(ctx, req.(*ClusterIdArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIdArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).Stop(ctx, req.(*ClusterIdArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInterface_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRegionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInterfaceServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInterface_GetRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInterfaceServer).GetRegions(ctx, req.(*ClusterRegionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterInterface_ServiceDesc is the grpc.ServiceDesc for ClusterInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.v1alpha1.ClusterInterface",
	HandlerType: (*ClusterInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ClusterInterface_Ping_Handler,
		},
		{
			MethodName: "GetClusterProviders",
			Handler:    _ClusterInterface_GetClusterProviders_Handler,
		},
		{
			MethodName: "GetClusterStatuses",
			Handler:    _ClusterInterface_GetClusterStatuses_Handler,
		},
		{
			MethodName: "GetClusterLevels",
			Handler:    _ClusterInterface_GetClusterLevels_Handler,
		},
		{
			MethodName: "GetNodeRoles",
			Handler:    _ClusterInterface_GetNodeRoles_Handler,
		},
		{
			MethodName: "GetNodeStatuses",
			Handler:    _ClusterInterface_GetNodeStatuses_Handler,
		},
		{
			MethodName: "GetNodeGroupTypes",
			Handler:    _ClusterInterface_GetNodeGroupTypes_Handler,
		},
		{
			MethodName: "GetResourceTypes",
			Handler:    _ClusterInterface_GetResourceTypes_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ClusterInterface_Get_Handler,
		},
		{
			MethodName: "GetClustersByIds",
			Handler:    _ClusterInterface_GetClustersByIds_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _ClusterInterface_Save_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClusterInterface_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClusterInterface_Delete_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _ClusterInterface_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ClusterInterface_Stop_Handler,
		},
		{
			MethodName: "GetRegions",
			Handler:    _ClusterInterface_GetRegions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cluster/v1alpha1/cluster.proto",
}
