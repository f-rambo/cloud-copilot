// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: api/cluster/v1alpha1/cluster.proto

package v1alpha1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClusterInterfaceCheckBostionHost = "/cluster.v1alpha1.ClusterInterface/CheckBostionHost"
const OperationClusterInterfaceDelete = "/cluster.v1alpha1.ClusterInterface/Delete"
const OperationClusterInterfaceGet = "/cluster.v1alpha1.ClusterInterface/Get"
const OperationClusterInterfaceList = "/cluster.v1alpha1.ClusterInterface/List"
const OperationClusterInterfacePing = "/cluster.v1alpha1.ClusterInterface/Ping"
const OperationClusterInterfaceSave = "/cluster.v1alpha1.ClusterInterface/Save"
const OperationClusterInterfaceStartCluster = "/cluster.v1alpha1.ClusterInterface/StartCluster"

type ClusterInterfaceHTTPServer interface {
	CheckBostionHost(context.Context, *CheckBostionHostRequest) (*Msg, error)
	Delete(context.Context, *ClusterID) (*Msg, error)
	Get(context.Context, *ClusterID) (*Cluster, error)
	List(context.Context, *emptypb.Empty) (*ClusterList, error)
	Ping(context.Context, *emptypb.Empty) (*Msg, error)
	Save(context.Context, *ClusterArgs) (*Cluster, error)
	StartCluster(context.Context, *ClusterID) (*Msg, error)
}

func RegisterClusterInterfaceHTTPServer(s *http.Server, srv ClusterInterfaceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1alpha1/cluster/ping", _ClusterInterface_Ping0_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/cluster", _ClusterInterface_Get0_HTTP_Handler(srv))
	r.POST("/api/v1alpha1/cluster", _ClusterInterface_Save0_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/cluster/list", _ClusterInterface_List0_HTTP_Handler(srv))
	r.DELETE("/api/v1alpha1/cluster", _ClusterInterface_Delete0_HTTP_Handler(srv))
	r.POST("/api/v1alpha1/cluster/start", _ClusterInterface_StartCluster0_HTTP_Handler(srv))
	r.POST("/api/v1alpha1/cluster/check_bostion_host", _ClusterInterface_CheckBostionHost0_HTTP_Handler(srv))
}

func _ClusterInterface_Ping0_HTTP_Handler(srv ClusterInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterInterfacePing)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _ClusterInterface_Get0_HTTP_Handler(srv ClusterInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterInterfaceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*ClusterID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Cluster)
		return ctx.Result(200, reply)
	}
}

func _ClusterInterface_Save0_HTTP_Handler(srv ClusterInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterArgs
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterInterfaceSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Save(ctx, req.(*ClusterArgs))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Cluster)
		return ctx.Result(200, reply)
	}
}

func _ClusterInterface_List0_HTTP_Handler(srv ClusterInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterInterfaceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClusterList)
		return ctx.Result(200, reply)
	}
}

func _ClusterInterface_Delete0_HTTP_Handler(srv ClusterInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterID
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterInterfaceDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*ClusterID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _ClusterInterface_StartCluster0_HTTP_Handler(srv ClusterInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterID
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterInterfaceStartCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartCluster(ctx, req.(*ClusterID))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

func _ClusterInterface_CheckBostionHost0_HTTP_Handler(srv ClusterInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckBostionHostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterInterfaceCheckBostionHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckBostionHost(ctx, req.(*CheckBostionHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Msg)
		return ctx.Result(200, reply)
	}
}

type ClusterInterfaceHTTPClient interface {
	CheckBostionHost(ctx context.Context, req *CheckBostionHostRequest, opts ...http.CallOption) (rsp *Msg, err error)
	Delete(ctx context.Context, req *ClusterID, opts ...http.CallOption) (rsp *Msg, err error)
	Get(ctx context.Context, req *ClusterID, opts ...http.CallOption) (rsp *Cluster, err error)
	List(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ClusterList, err error)
	Ping(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Msg, err error)
	Save(ctx context.Context, req *ClusterArgs, opts ...http.CallOption) (rsp *Cluster, err error)
	StartCluster(ctx context.Context, req *ClusterID, opts ...http.CallOption) (rsp *Msg, err error)
}

type ClusterInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewClusterInterfaceHTTPClient(client *http.Client) ClusterInterfaceHTTPClient {
	return &ClusterInterfaceHTTPClientImpl{client}
}

func (c *ClusterInterfaceHTTPClientImpl) CheckBostionHost(ctx context.Context, in *CheckBostionHostRequest, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/api/v1alpha1/cluster/check_bostion_host"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterInterfaceCheckBostionHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterInterfaceHTTPClientImpl) Delete(ctx context.Context, in *ClusterID, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/api/v1alpha1/cluster"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterInterfaceDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterInterfaceHTTPClientImpl) Get(ctx context.Context, in *ClusterID, opts ...http.CallOption) (*Cluster, error) {
	var out Cluster
	pattern := "/api/v1alpha1/cluster"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterInterfaceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterInterfaceHTTPClientImpl) List(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ClusterList, error) {
	var out ClusterList
	pattern := "/api/v1alpha1/cluster/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterInterfaceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterInterfaceHTTPClientImpl) Ping(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/api/v1alpha1/cluster/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterInterfacePing))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterInterfaceHTTPClientImpl) Save(ctx context.Context, in *ClusterArgs, opts ...http.CallOption) (*Cluster, error) {
	var out Cluster
	pattern := "/api/v1alpha1/cluster"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterInterfaceSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterInterfaceHTTPClientImpl) StartCluster(ctx context.Context, in *ClusterID, opts ...http.CallOption) (*Msg, error) {
	var out Msg
	pattern := "/api/v1alpha1/cluster/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterInterfaceStartCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
