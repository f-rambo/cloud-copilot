// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.29.3
// source: api/project/v1alpha1/project.proto

package v1alpha1

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/api/common"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProjectServiceDelete = "/project.v1alpha1.ProjectService/Delete"
const OperationProjectServiceGet = "/project.v1alpha1.ProjectService/Get"
const OperationProjectServiceList = "/project.v1alpha1.ProjectService/List"
const OperationProjectServiceSave = "/project.v1alpha1.ProjectService/Save"

type ProjectServiceHTTPServer interface {
	Delete(context.Context, *ProjectDetailRequest) (*common.Msg, error)
	Get(context.Context, *ProjectDetailRequest) (*Project, error)
	List(context.Context, *ProjectsReqquest) (*Projects, error)
	Save(context.Context, *Project) (*common.Msg, error)
}

func RegisterProjectServiceHTTPServer(s *http.Server, srv ProjectServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1alpha1/project", _ProjectService_Save3_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/project", _ProjectService_Get3_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/project/list", _ProjectService_List3_HTTP_Handler(srv))
	r.DELETE("/api/v1alpha1/project", _ProjectService_Delete3_HTTP_Handler(srv))
}

func _ProjectService_Save3_HTTP_Handler(srv ProjectServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Project
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectServiceSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Save(ctx, req.(*Project))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

func _ProjectService_Get3_HTTP_Handler(srv ProjectServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProjectDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectServiceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*ProjectDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Project)
		return ctx.Result(200, reply)
	}
}

func _ProjectService_List3_HTTP_Handler(srv ProjectServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProjectsReqquest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectServiceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*ProjectsReqquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Projects)
		return ctx.Result(200, reply)
	}
}

func _ProjectService_Delete3_HTTP_Handler(srv ProjectServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProjectDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectServiceDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*ProjectDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

type ProjectServiceHTTPClient interface {
	Delete(ctx context.Context, req *ProjectDetailRequest, opts ...http.CallOption) (rsp *common.Msg, err error)
	Get(ctx context.Context, req *ProjectDetailRequest, opts ...http.CallOption) (rsp *Project, err error)
	List(ctx context.Context, req *ProjectsReqquest, opts ...http.CallOption) (rsp *Projects, err error)
	Save(ctx context.Context, req *Project, opts ...http.CallOption) (rsp *common.Msg, err error)
}

type ProjectServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewProjectServiceHTTPClient(client *http.Client) ProjectServiceHTTPClient {
	return &ProjectServiceHTTPClientImpl{client}
}

func (c *ProjectServiceHTTPClientImpl) Delete(ctx context.Context, in *ProjectDetailRequest, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/project"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProjectServiceDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProjectServiceHTTPClientImpl) Get(ctx context.Context, in *ProjectDetailRequest, opts ...http.CallOption) (*Project, error) {
	var out Project
	pattern := "/api/v1alpha1/project"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProjectServiceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProjectServiceHTTPClientImpl) List(ctx context.Context, in *ProjectsReqquest, opts ...http.CallOption) (*Projects, error) {
	var out Projects
	pattern := "/api/v1alpha1/project/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProjectServiceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProjectServiceHTTPClientImpl) Save(ctx context.Context, in *Project, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/project"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectServiceSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
