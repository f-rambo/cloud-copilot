syntax = "proto3";

package service.v1alpha1;

import "google/api/annotations.proto";
import "api/common/error_reason.proto";
import "api/service/v1alpha1/message.proto";

option go_package = "api/service/v1alpha1;v1alpha1";

service ServiceInterface {
      rpc List(ServiceRequest) returns (Services) {
            option (google.api.http) = {
              get: "/api/v1alpha1/service/list"
            };
      }

      rpc Save(Service) returns (common.Msg) {
            option (google.api.http) = {
              post: "/api/v1alpha1/service/save"
              body: "*"
            };
      }

      rpc Get(ServiceRequest) returns (Service) {
            option (google.api.http) = {
              get: "/api/v1alpha1/service/get"
            };
      }

      rpc Delete(ServiceRequest) returns (common.Msg) {
            option (google.api.http) = {
              delete: "/api/v1alpha1/service/delete"
            };
      }

      rpc GetServiceResource(ServiceRequest) returns (AlreadyResource) {
            option (google.api.http) = {
              get: "/api/v1alpha1/service/resource"
            };
      }

      rpc SaveWorkflow(Workflow) returns(common.Msg) {
            option (google.api.http) = {
              post: "/api/v1alpha1/service/workflow"
              body: "*"
            };
      }

      rpc GetWorkflow(WorkflowRequest) returns(Workflow) {
            option (google.api.http) = {
              get: "/api/v1alpha1/service/workflow"
            };
      }

      rpc CreateContinuousIntegration(ContinuousIntegration) returns(common.Msg) {
            option (google.api.http) = {
              post: "/api/v1alpha1/service/continuousintegration"
              body: "*"
            };
      }

      rpc GetContinuousIntegration(ContinuousIntegrationRequest) returns(ContinuousIntegration) {
            option (google.api.http) = {
              get: "/api/v1alpha1/service/continuousintegration"
            };
      }

      rpc GetContinuousIntegrations(ContinuousIntegrationRequest) returns(ContinuousIntegrations) {
            option (google.api.http) = {
              get: "/api/v1alpha1/service/continuousintegrations"
            };
      }

      rpc DeleteContinuousIntegration(ContinuousIntegrationRequest) returns(common.Msg) {
            option (google.api.http) = {
              delete: "/api/v1alpha1/service/continuousintegration"
            };
      }

      rpc CreateContinuousDeployment(ContinuousDeployment) returns(common.Msg) {
            option (google.api.http) = {
              post: "/api/v1alpha1/service/continuousdeployment"
              body: "*"
            };
      }

      rpc GetContinuousDeployment(ContinuousDeploymentRequest) returns(ContinuousDeployment) {
            option (google.api.http) = {
              get: "/api/v1alpha1/service/continuousdeployment"
            };
      }

      rpc GetContinuousDeployments(ContinuousDeploymentRequest) returns(ContinuousDeployments) {
            option (google.api.http) = {
              get: "/api/v1alpha1/service/continuousdeployments"
            };
      }

      rpc DeleteContinuousDeployment(ContinuousDeploymentRequest) returns(common.Msg) {
            option (google.api.http) = {
              delete: "/api/v1alpha1/service/continuousdeployment"
            };
      }

      rpc ApplyService(ServiceRequest) returns(common.Msg) {
            option (google.api.http) = {
              post: "/api/v1alpha1/service/apply"
              body: "*"
            };
      }
}