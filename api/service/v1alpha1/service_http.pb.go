// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: api/service/v1alpha1/service.proto

package v1alpha1

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/api/common"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceInterfaceApplyService = "/service.v1alpha1.ServiceInterface/ApplyService"
const OperationServiceInterfaceCreateContinuousDeployment = "/service.v1alpha1.ServiceInterface/CreateContinuousDeployment"
const OperationServiceInterfaceCreateContinuousIntegration = "/service.v1alpha1.ServiceInterface/CreateContinuousIntegration"
const OperationServiceInterfaceDelete = "/service.v1alpha1.ServiceInterface/Delete"
const OperationServiceInterfaceDeleteContinuousDeployment = "/service.v1alpha1.ServiceInterface/DeleteContinuousDeployment"
const OperationServiceInterfaceDeleteContinuousIntegration = "/service.v1alpha1.ServiceInterface/DeleteContinuousIntegration"
const OperationServiceInterfaceGet = "/service.v1alpha1.ServiceInterface/Get"
const OperationServiceInterfaceGetContinuousDeployment = "/service.v1alpha1.ServiceInterface/GetContinuousDeployment"
const OperationServiceInterfaceGetContinuousDeployments = "/service.v1alpha1.ServiceInterface/GetContinuousDeployments"
const OperationServiceInterfaceGetContinuousIntegration = "/service.v1alpha1.ServiceInterface/GetContinuousIntegration"
const OperationServiceInterfaceGetContinuousIntegrations = "/service.v1alpha1.ServiceInterface/GetContinuousIntegrations"
const OperationServiceInterfaceGetDefaultWorkflow = "/service.v1alpha1.ServiceInterface/GetDefaultWorkflow"
const OperationServiceInterfaceGetServiceResource = "/service.v1alpha1.ServiceInterface/GetServiceResource"
const OperationServiceInterfaceGetWorkflow = "/service.v1alpha1.ServiceInterface/GetWorkflow"
const OperationServiceInterfaceList = "/service.v1alpha1.ServiceInterface/List"
const OperationServiceInterfaceSave = "/service.v1alpha1.ServiceInterface/Save"
const OperationServiceInterfaceSaveWorkflow = "/service.v1alpha1.ServiceInterface/SaveWorkflow"

type ServiceInterfaceHTTPServer interface {
	ApplyService(context.Context, *ServiceRequest) (*common.Msg, error)
	CreateContinuousDeployment(context.Context, *ContinuousDeployment) (*common.Msg, error)
	CreateContinuousIntegration(context.Context, *ContinuousIntegration) (*common.Msg, error)
	Delete(context.Context, *ServiceRequest) (*common.Msg, error)
	DeleteContinuousDeployment(context.Context, *ContinuousDeploymentRequest) (*common.Msg, error)
	DeleteContinuousIntegration(context.Context, *ContinuousIntegrationRequest) (*common.Msg, error)
	Get(context.Context, *ServiceRequest) (*Service, error)
	GetContinuousDeployment(context.Context, *ContinuousDeploymentRequest) (*ContinuousDeployment, error)
	GetContinuousDeployments(context.Context, *ContinuousDeploymentRequest) (*ContinuousDeployments, error)
	GetContinuousIntegration(context.Context, *ContinuousIntegrationRequest) (*ContinuousIntegration, error)
	GetContinuousIntegrations(context.Context, *ContinuousIntegrationRequest) (*ContinuousIntegrations, error)
	GetDefaultWorkflow(context.Context, *ServiceRequest) (*Workflow, error)
	GetServiceResource(context.Context, *ServiceRequest) (*AlreadyResource, error)
	GetWorkflow(context.Context, *WorkflowRequest) (*Workflow, error)
	List(context.Context, *ServiceRequest) (*Services, error)
	Save(context.Context, *Service) (*common.Msg, error)
	SaveWorkflow(context.Context, *Workflow) (*common.Msg, error)
}

func RegisterServiceInterfaceHTTPServer(s *http.Server, srv ServiceInterfaceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1alpha1/service/list", _ServiceInterface_List4_HTTP_Handler(srv))
	r.POST("/api/v1alpha1/service/save", _ServiceInterface_Save4_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/service/get", _ServiceInterface_Get4_HTTP_Handler(srv))
	r.DELETE("/api/v1alpha1/service/delete", _ServiceInterface_Delete3_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/service/resource", _ServiceInterface_GetServiceResource0_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/service/workflow/default", _ServiceInterface_GetDefaultWorkflow0_HTTP_Handler(srv))
	r.POST("/api/v1alpha1/service/workflow", _ServiceInterface_SaveWorkflow0_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/service/workflow", _ServiceInterface_GetWorkflow0_HTTP_Handler(srv))
	r.POST("/api/v1alpha1/service/continuousintegration", _ServiceInterface_CreateContinuousIntegration0_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/service/continuousintegration", _ServiceInterface_GetContinuousIntegration0_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/service/continuousintegrations", _ServiceInterface_GetContinuousIntegrations0_HTTP_Handler(srv))
	r.DELETE("/api/v1alpha1/service/continuousintegration", _ServiceInterface_DeleteContinuousIntegration0_HTTP_Handler(srv))
	r.POST("/api/v1alpha1/service/continuousdeployment", _ServiceInterface_CreateContinuousDeployment0_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/service/continuousdeployment", _ServiceInterface_GetContinuousDeployment0_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/service/continuousdeployments", _ServiceInterface_GetContinuousDeployments0_HTTP_Handler(srv))
	r.DELETE("/api/v1alpha1/service/continuousdeployment", _ServiceInterface_DeleteContinuousDeployment0_HTTP_Handler(srv))
	r.POST("/api/v1alpha1/service/apply", _ServiceInterface_ApplyService0_HTTP_Handler(srv))
}

func _ServiceInterface_List4_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*ServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Services)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_Save4_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Service
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Save(ctx, req.(*Service))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_Get4_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*ServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Service)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_Delete3_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*ServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_GetServiceResource0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceGetServiceResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetServiceResource(ctx, req.(*ServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AlreadyResource)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_GetDefaultWorkflow0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceGetDefaultWorkflow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDefaultWorkflow(ctx, req.(*ServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Workflow)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_SaveWorkflow0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Workflow
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceSaveWorkflow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveWorkflow(ctx, req.(*Workflow))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_GetWorkflow0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WorkflowRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceGetWorkflow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkflow(ctx, req.(*WorkflowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Workflow)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_CreateContinuousIntegration0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ContinuousIntegration
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceCreateContinuousIntegration)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateContinuousIntegration(ctx, req.(*ContinuousIntegration))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_GetContinuousIntegration0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ContinuousIntegrationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceGetContinuousIntegration)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContinuousIntegration(ctx, req.(*ContinuousIntegrationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ContinuousIntegration)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_GetContinuousIntegrations0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ContinuousIntegrationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceGetContinuousIntegrations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContinuousIntegrations(ctx, req.(*ContinuousIntegrationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ContinuousIntegrations)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_DeleteContinuousIntegration0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ContinuousIntegrationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceDeleteContinuousIntegration)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteContinuousIntegration(ctx, req.(*ContinuousIntegrationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_CreateContinuousDeployment0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ContinuousDeployment
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceCreateContinuousDeployment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateContinuousDeployment(ctx, req.(*ContinuousDeployment))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_GetContinuousDeployment0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ContinuousDeploymentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceGetContinuousDeployment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContinuousDeployment(ctx, req.(*ContinuousDeploymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ContinuousDeployment)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_GetContinuousDeployments0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ContinuousDeploymentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceGetContinuousDeployments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContinuousDeployments(ctx, req.(*ContinuousDeploymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ContinuousDeployments)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_DeleteContinuousDeployment0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ContinuousDeploymentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceDeleteContinuousDeployment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteContinuousDeployment(ctx, req.(*ContinuousDeploymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

func _ServiceInterface_ApplyService0_HTTP_Handler(srv ServiceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ServiceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceInterfaceApplyService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApplyService(ctx, req.(*ServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

type ServiceInterfaceHTTPClient interface {
	ApplyService(ctx context.Context, req *ServiceRequest, opts ...http.CallOption) (rsp *common.Msg, err error)
	CreateContinuousDeployment(ctx context.Context, req *ContinuousDeployment, opts ...http.CallOption) (rsp *common.Msg, err error)
	CreateContinuousIntegration(ctx context.Context, req *ContinuousIntegration, opts ...http.CallOption) (rsp *common.Msg, err error)
	Delete(ctx context.Context, req *ServiceRequest, opts ...http.CallOption) (rsp *common.Msg, err error)
	DeleteContinuousDeployment(ctx context.Context, req *ContinuousDeploymentRequest, opts ...http.CallOption) (rsp *common.Msg, err error)
	DeleteContinuousIntegration(ctx context.Context, req *ContinuousIntegrationRequest, opts ...http.CallOption) (rsp *common.Msg, err error)
	Get(ctx context.Context, req *ServiceRequest, opts ...http.CallOption) (rsp *Service, err error)
	GetContinuousDeployment(ctx context.Context, req *ContinuousDeploymentRequest, opts ...http.CallOption) (rsp *ContinuousDeployment, err error)
	GetContinuousDeployments(ctx context.Context, req *ContinuousDeploymentRequest, opts ...http.CallOption) (rsp *ContinuousDeployments, err error)
	GetContinuousIntegration(ctx context.Context, req *ContinuousIntegrationRequest, opts ...http.CallOption) (rsp *ContinuousIntegration, err error)
	GetContinuousIntegrations(ctx context.Context, req *ContinuousIntegrationRequest, opts ...http.CallOption) (rsp *ContinuousIntegrations, err error)
	GetDefaultWorkflow(ctx context.Context, req *ServiceRequest, opts ...http.CallOption) (rsp *Workflow, err error)
	GetServiceResource(ctx context.Context, req *ServiceRequest, opts ...http.CallOption) (rsp *AlreadyResource, err error)
	GetWorkflow(ctx context.Context, req *WorkflowRequest, opts ...http.CallOption) (rsp *Workflow, err error)
	List(ctx context.Context, req *ServiceRequest, opts ...http.CallOption) (rsp *Services, err error)
	Save(ctx context.Context, req *Service, opts ...http.CallOption) (rsp *common.Msg, err error)
	SaveWorkflow(ctx context.Context, req *Workflow, opts ...http.CallOption) (rsp *common.Msg, err error)
}

type ServiceInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceInterfaceHTTPClient(client *http.Client) ServiceInterfaceHTTPClient {
	return &ServiceInterfaceHTTPClientImpl{client}
}

func (c *ServiceInterfaceHTTPClientImpl) ApplyService(ctx context.Context, in *ServiceRequest, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/service/apply"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceInterfaceApplyService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) CreateContinuousDeployment(ctx context.Context, in *ContinuousDeployment, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/service/continuousdeployment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceInterfaceCreateContinuousDeployment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) CreateContinuousIntegration(ctx context.Context, in *ContinuousIntegration, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/service/continuousintegration"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceInterfaceCreateContinuousIntegration))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) Delete(ctx context.Context, in *ServiceRequest, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/service/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) DeleteContinuousDeployment(ctx context.Context, in *ContinuousDeploymentRequest, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/service/continuousdeployment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceDeleteContinuousDeployment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) DeleteContinuousIntegration(ctx context.Context, in *ContinuousIntegrationRequest, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/service/continuousintegration"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceDeleteContinuousIntegration))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) Get(ctx context.Context, in *ServiceRequest, opts ...http.CallOption) (*Service, error) {
	var out Service
	pattern := "/api/v1alpha1/service/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) GetContinuousDeployment(ctx context.Context, in *ContinuousDeploymentRequest, opts ...http.CallOption) (*ContinuousDeployment, error) {
	var out ContinuousDeployment
	pattern := "/api/v1alpha1/service/continuousdeployment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceGetContinuousDeployment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) GetContinuousDeployments(ctx context.Context, in *ContinuousDeploymentRequest, opts ...http.CallOption) (*ContinuousDeployments, error) {
	var out ContinuousDeployments
	pattern := "/api/v1alpha1/service/continuousdeployments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceGetContinuousDeployments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) GetContinuousIntegration(ctx context.Context, in *ContinuousIntegrationRequest, opts ...http.CallOption) (*ContinuousIntegration, error) {
	var out ContinuousIntegration
	pattern := "/api/v1alpha1/service/continuousintegration"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceGetContinuousIntegration))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) GetContinuousIntegrations(ctx context.Context, in *ContinuousIntegrationRequest, opts ...http.CallOption) (*ContinuousIntegrations, error) {
	var out ContinuousIntegrations
	pattern := "/api/v1alpha1/service/continuousintegrations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceGetContinuousIntegrations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) GetDefaultWorkflow(ctx context.Context, in *ServiceRequest, opts ...http.CallOption) (*Workflow, error) {
	var out Workflow
	pattern := "/api/v1alpha1/service/workflow/default"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceGetDefaultWorkflow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) GetServiceResource(ctx context.Context, in *ServiceRequest, opts ...http.CallOption) (*AlreadyResource, error) {
	var out AlreadyResource
	pattern := "/api/v1alpha1/service/resource"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceGetServiceResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) GetWorkflow(ctx context.Context, in *WorkflowRequest, opts ...http.CallOption) (*Workflow, error) {
	var out Workflow
	pattern := "/api/v1alpha1/service/workflow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceGetWorkflow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) List(ctx context.Context, in *ServiceRequest, opts ...http.CallOption) (*Services, error) {
	var out Services
	pattern := "/api/v1alpha1/service/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceInterfaceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) Save(ctx context.Context, in *Service, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/service/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceInterfaceSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceInterfaceHTTPClientImpl) SaveWorkflow(ctx context.Context, in *Workflow, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/service/workflow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceInterfaceSaveWorkflow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
