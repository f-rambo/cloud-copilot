// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api/service/v1alpha1/service.proto

package v1alpha1

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceInterface_List_FullMethodName                        = "/service.v1alpha1.ServiceInterface/List"
	ServiceInterface_Save_FullMethodName                        = "/service.v1alpha1.ServiceInterface/Save"
	ServiceInterface_Get_FullMethodName                         = "/service.v1alpha1.ServiceInterface/Get"
	ServiceInterface_Delete_FullMethodName                      = "/service.v1alpha1.ServiceInterface/Delete"
	ServiceInterface_GetServiceResource_FullMethodName          = "/service.v1alpha1.ServiceInterface/GetServiceResource"
	ServiceInterface_SaveWorkflow_FullMethodName                = "/service.v1alpha1.ServiceInterface/SaveWorkflow"
	ServiceInterface_GetWorkflow_FullMethodName                 = "/service.v1alpha1.ServiceInterface/GetWorkflow"
	ServiceInterface_CreateContinuousIntegration_FullMethodName = "/service.v1alpha1.ServiceInterface/CreateContinuousIntegration"
	ServiceInterface_GetContinuousIntegration_FullMethodName    = "/service.v1alpha1.ServiceInterface/GetContinuousIntegration"
	ServiceInterface_GetContinuousIntegrations_FullMethodName   = "/service.v1alpha1.ServiceInterface/GetContinuousIntegrations"
	ServiceInterface_DeleteContinuousIntegration_FullMethodName = "/service.v1alpha1.ServiceInterface/DeleteContinuousIntegration"
	ServiceInterface_CreateContinuousDeployment_FullMethodName  = "/service.v1alpha1.ServiceInterface/CreateContinuousDeployment"
	ServiceInterface_GetContinuousDeployment_FullMethodName     = "/service.v1alpha1.ServiceInterface/GetContinuousDeployment"
	ServiceInterface_GetContinuousDeployments_FullMethodName    = "/service.v1alpha1.ServiceInterface/GetContinuousDeployments"
	ServiceInterface_DeleteContinuousDeployment_FullMethodName  = "/service.v1alpha1.ServiceInterface/DeleteContinuousDeployment"
	ServiceInterface_ApplyService_FullMethodName                = "/service.v1alpha1.ServiceInterface/ApplyService"
)

// ServiceInterfaceClient is the client API for ServiceInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceInterfaceClient interface {
	List(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Services, error)
	Save(ctx context.Context, in *Service, opts ...grpc.CallOption) (*common.Msg, error)
	Get(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Service, error)
	Delete(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*common.Msg, error)
	GetServiceResource(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*AlreadyResource, error)
	SaveWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*common.Msg, error)
	GetWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*Workflow, error)
	CreateContinuousIntegration(ctx context.Context, in *ContinuousIntegration, opts ...grpc.CallOption) (*common.Msg, error)
	GetContinuousIntegration(ctx context.Context, in *ContinuousIntegrationRequest, opts ...grpc.CallOption) (*ContinuousIntegration, error)
	GetContinuousIntegrations(ctx context.Context, in *ContinuousIntegrationRequest, opts ...grpc.CallOption) (*ContinuousIntegrations, error)
	DeleteContinuousIntegration(ctx context.Context, in *ContinuousIntegrationRequest, opts ...grpc.CallOption) (*common.Msg, error)
	CreateContinuousDeployment(ctx context.Context, in *ContinuousDeployment, opts ...grpc.CallOption) (*common.Msg, error)
	GetContinuousDeployment(ctx context.Context, in *ContinuousDeploymentRequest, opts ...grpc.CallOption) (*ContinuousDeployment, error)
	GetContinuousDeployments(ctx context.Context, in *ContinuousDeploymentRequest, opts ...grpc.CallOption) (*ContinuousDeployments, error)
	DeleteContinuousDeployment(ctx context.Context, in *ContinuousDeploymentRequest, opts ...grpc.CallOption) (*common.Msg, error)
	ApplyService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*common.Msg, error)
}

type serviceInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceInterfaceClient(cc grpc.ClientConnInterface) ServiceInterfaceClient {
	return &serviceInterfaceClient{cc}
}

func (c *serviceInterfaceClient) List(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Services, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Services)
	err := c.cc.Invoke(ctx, ServiceInterface_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) Save(ctx context.Context, in *Service, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) Get(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Service)
	err := c.cc.Invoke(ctx, ServiceInterface_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) Delete(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) GetServiceResource(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*AlreadyResource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlreadyResource)
	err := c.cc.Invoke(ctx, ServiceInterface_GetServiceResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) SaveWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_SaveWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) GetWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*Workflow, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Workflow)
	err := c.cc.Invoke(ctx, ServiceInterface_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) CreateContinuousIntegration(ctx context.Context, in *ContinuousIntegration, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_CreateContinuousIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) GetContinuousIntegration(ctx context.Context, in *ContinuousIntegrationRequest, opts ...grpc.CallOption) (*ContinuousIntegration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContinuousIntegration)
	err := c.cc.Invoke(ctx, ServiceInterface_GetContinuousIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) GetContinuousIntegrations(ctx context.Context, in *ContinuousIntegrationRequest, opts ...grpc.CallOption) (*ContinuousIntegrations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContinuousIntegrations)
	err := c.cc.Invoke(ctx, ServiceInterface_GetContinuousIntegrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) DeleteContinuousIntegration(ctx context.Context, in *ContinuousIntegrationRequest, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_DeleteContinuousIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) CreateContinuousDeployment(ctx context.Context, in *ContinuousDeployment, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_CreateContinuousDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) GetContinuousDeployment(ctx context.Context, in *ContinuousDeploymentRequest, opts ...grpc.CallOption) (*ContinuousDeployment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContinuousDeployment)
	err := c.cc.Invoke(ctx, ServiceInterface_GetContinuousDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) GetContinuousDeployments(ctx context.Context, in *ContinuousDeploymentRequest, opts ...grpc.CallOption) (*ContinuousDeployments, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContinuousDeployments)
	err := c.cc.Invoke(ctx, ServiceInterface_GetContinuousDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) DeleteContinuousDeployment(ctx context.Context, in *ContinuousDeploymentRequest, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_DeleteContinuousDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInterfaceClient) ApplyService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, ServiceInterface_ApplyService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceInterfaceServer is the server API for ServiceInterface service.
// All implementations must embed UnimplementedServiceInterfaceServer
// for forward compatibility.
type ServiceInterfaceServer interface {
	List(context.Context, *ServiceRequest) (*Services, error)
	Save(context.Context, *Service) (*common.Msg, error)
	Get(context.Context, *ServiceRequest) (*Service, error)
	Delete(context.Context, *ServiceRequest) (*common.Msg, error)
	GetServiceResource(context.Context, *ServiceRequest) (*AlreadyResource, error)
	SaveWorkflow(context.Context, *Workflow) (*common.Msg, error)
	GetWorkflow(context.Context, *WorkflowRequest) (*Workflow, error)
	CreateContinuousIntegration(context.Context, *ContinuousIntegration) (*common.Msg, error)
	GetContinuousIntegration(context.Context, *ContinuousIntegrationRequest) (*ContinuousIntegration, error)
	GetContinuousIntegrations(context.Context, *ContinuousIntegrationRequest) (*ContinuousIntegrations, error)
	DeleteContinuousIntegration(context.Context, *ContinuousIntegrationRequest) (*common.Msg, error)
	CreateContinuousDeployment(context.Context, *ContinuousDeployment) (*common.Msg, error)
	GetContinuousDeployment(context.Context, *ContinuousDeploymentRequest) (*ContinuousDeployment, error)
	GetContinuousDeployments(context.Context, *ContinuousDeploymentRequest) (*ContinuousDeployments, error)
	DeleteContinuousDeployment(context.Context, *ContinuousDeploymentRequest) (*common.Msg, error)
	ApplyService(context.Context, *ServiceRequest) (*common.Msg, error)
	mustEmbedUnimplementedServiceInterfaceServer()
}

// UnimplementedServiceInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceInterfaceServer struct{}

func (UnimplementedServiceInterfaceServer) List(context.Context, *ServiceRequest) (*Services, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServiceInterfaceServer) Save(context.Context, *Service) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedServiceInterfaceServer) Get(context.Context, *ServiceRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServiceInterfaceServer) Delete(context.Context, *ServiceRequest) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceInterfaceServer) GetServiceResource(context.Context, *ServiceRequest) (*AlreadyResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceResource not implemented")
}
func (UnimplementedServiceInterfaceServer) SaveWorkflow(context.Context, *Workflow) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveWorkflow not implemented")
}
func (UnimplementedServiceInterfaceServer) GetWorkflow(context.Context, *WorkflowRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedServiceInterfaceServer) CreateContinuousIntegration(context.Context, *ContinuousIntegration) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContinuousIntegration not implemented")
}
func (UnimplementedServiceInterfaceServer) GetContinuousIntegration(context.Context, *ContinuousIntegrationRequest) (*ContinuousIntegration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContinuousIntegration not implemented")
}
func (UnimplementedServiceInterfaceServer) GetContinuousIntegrations(context.Context, *ContinuousIntegrationRequest) (*ContinuousIntegrations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContinuousIntegrations not implemented")
}
func (UnimplementedServiceInterfaceServer) DeleteContinuousIntegration(context.Context, *ContinuousIntegrationRequest) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContinuousIntegration not implemented")
}
func (UnimplementedServiceInterfaceServer) CreateContinuousDeployment(context.Context, *ContinuousDeployment) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContinuousDeployment not implemented")
}
func (UnimplementedServiceInterfaceServer) GetContinuousDeployment(context.Context, *ContinuousDeploymentRequest) (*ContinuousDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContinuousDeployment not implemented")
}
func (UnimplementedServiceInterfaceServer) GetContinuousDeployments(context.Context, *ContinuousDeploymentRequest) (*ContinuousDeployments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContinuousDeployments not implemented")
}
func (UnimplementedServiceInterfaceServer) DeleteContinuousDeployment(context.Context, *ContinuousDeploymentRequest) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContinuousDeployment not implemented")
}
func (UnimplementedServiceInterfaceServer) ApplyService(context.Context, *ServiceRequest) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyService not implemented")
}
func (UnimplementedServiceInterfaceServer) mustEmbedUnimplementedServiceInterfaceServer() {}
func (UnimplementedServiceInterfaceServer) testEmbeddedByValue()                          {}

// UnsafeServiceInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceInterfaceServer will
// result in compilation errors.
type UnsafeServiceInterfaceServer interface {
	mustEmbedUnimplementedServiceInterfaceServer()
}

func RegisterServiceInterfaceServer(s grpc.ServiceRegistrar, srv ServiceInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedServiceInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceInterface_ServiceDesc, srv)
}

func _ServiceInterface_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).List(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).Save(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).Get(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).Delete(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_GetServiceResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).GetServiceResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_GetServiceResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).GetServiceResource(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_SaveWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).SaveWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_SaveWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).SaveWorkflow(ctx, req.(*Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).GetWorkflow(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_CreateContinuousIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinuousIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).CreateContinuousIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_CreateContinuousIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).CreateContinuousIntegration(ctx, req.(*ContinuousIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_GetContinuousIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinuousIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).GetContinuousIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_GetContinuousIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).GetContinuousIntegration(ctx, req.(*ContinuousIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_GetContinuousIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinuousIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).GetContinuousIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_GetContinuousIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).GetContinuousIntegrations(ctx, req.(*ContinuousIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_DeleteContinuousIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinuousIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).DeleteContinuousIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_DeleteContinuousIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).DeleteContinuousIntegration(ctx, req.(*ContinuousIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_CreateContinuousDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinuousDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).CreateContinuousDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_CreateContinuousDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).CreateContinuousDeployment(ctx, req.(*ContinuousDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_GetContinuousDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinuousDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).GetContinuousDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_GetContinuousDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).GetContinuousDeployment(ctx, req.(*ContinuousDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_GetContinuousDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinuousDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).GetContinuousDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_GetContinuousDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).GetContinuousDeployments(ctx, req.(*ContinuousDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_DeleteContinuousDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinuousDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).DeleteContinuousDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_DeleteContinuousDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).DeleteContinuousDeployment(ctx, req.(*ContinuousDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInterface_ApplyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInterfaceServer).ApplyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInterface_ApplyService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInterfaceServer).ApplyService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceInterface_ServiceDesc is the grpc.ServiceDesc for ServiceInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1alpha1.ServiceInterface",
	HandlerType: (*ServiceInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ServiceInterface_List_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _ServiceInterface_Save_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ServiceInterface_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceInterface_Delete_Handler,
		},
		{
			MethodName: "GetServiceResource",
			Handler:    _ServiceInterface_GetServiceResource_Handler,
		},
		{
			MethodName: "SaveWorkflow",
			Handler:    _ServiceInterface_SaveWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _ServiceInterface_GetWorkflow_Handler,
		},
		{
			MethodName: "CreateContinuousIntegration",
			Handler:    _ServiceInterface_CreateContinuousIntegration_Handler,
		},
		{
			MethodName: "GetContinuousIntegration",
			Handler:    _ServiceInterface_GetContinuousIntegration_Handler,
		},
		{
			MethodName: "GetContinuousIntegrations",
			Handler:    _ServiceInterface_GetContinuousIntegrations_Handler,
		},
		{
			MethodName: "DeleteContinuousIntegration",
			Handler:    _ServiceInterface_DeleteContinuousIntegration_Handler,
		},
		{
			MethodName: "CreateContinuousDeployment",
			Handler:    _ServiceInterface_CreateContinuousDeployment_Handler,
		},
		{
			MethodName: "GetContinuousDeployment",
			Handler:    _ServiceInterface_GetContinuousDeployment_Handler,
		},
		{
			MethodName: "GetContinuousDeployments",
			Handler:    _ServiceInterface_GetContinuousDeployments_Handler,
		},
		{
			MethodName: "DeleteContinuousDeployment",
			Handler:    _ServiceInterface_DeleteContinuousDeployment_Handler,
		},
		{
			MethodName: "ApplyService",
			Handler:    _ServiceInterface_ApplyService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service/v1alpha1/service.proto",
}
