// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: api/workspace/v1alpha1/workspace.proto

package v1alpha1

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/api/common"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWorkspaceInterfaceGet = "/workspace.v1alpha1.WorkspaceInterface/Get"
const OperationWorkspaceInterfaceList = "/workspace.v1alpha1.WorkspaceInterface/List"
const OperationWorkspaceInterfaceSave = "/workspace.v1alpha1.WorkspaceInterface/Save"

type WorkspaceInterfaceHTTPServer interface {
	Get(context.Context, *WorkspaceParam) (*Workspace, error)
	List(context.Context, *WorkspaceParam) (*Workspaces, error)
	Save(context.Context, *Workspace) (*common.Msg, error)
}

func RegisterWorkspaceInterfaceHTTPServer(s *http.Server, srv WorkspaceInterfaceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1alpha1/workspace/save", _WorkspaceInterface_Save2_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/workspace/get", _WorkspaceInterface_Get2_HTTP_Handler(srv))
	r.GET("/api/v1alpha1/workspace/list", _WorkspaceInterface_List2_HTTP_Handler(srv))
}

func _WorkspaceInterface_Save2_HTTP_Handler(srv WorkspaceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Workspace
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkspaceInterfaceSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Save(ctx, req.(*Workspace))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Msg)
		return ctx.Result(200, reply)
	}
}

func _WorkspaceInterface_Get2_HTTP_Handler(srv WorkspaceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WorkspaceParam
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkspaceInterfaceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*WorkspaceParam))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Workspace)
		return ctx.Result(200, reply)
	}
}

func _WorkspaceInterface_List2_HTTP_Handler(srv WorkspaceInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WorkspaceParam
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkspaceInterfaceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*WorkspaceParam))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Workspaces)
		return ctx.Result(200, reply)
	}
}

type WorkspaceInterfaceHTTPClient interface {
	Get(ctx context.Context, req *WorkspaceParam, opts ...http.CallOption) (rsp *Workspace, err error)
	List(ctx context.Context, req *WorkspaceParam, opts ...http.CallOption) (rsp *Workspaces, err error)
	Save(ctx context.Context, req *Workspace, opts ...http.CallOption) (rsp *common.Msg, err error)
}

type WorkspaceInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewWorkspaceInterfaceHTTPClient(client *http.Client) WorkspaceInterfaceHTTPClient {
	return &WorkspaceInterfaceHTTPClientImpl{client}
}

func (c *WorkspaceInterfaceHTTPClientImpl) Get(ctx context.Context, in *WorkspaceParam, opts ...http.CallOption) (*Workspace, error) {
	var out Workspace
	pattern := "/api/v1alpha1/workspace/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkspaceInterfaceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WorkspaceInterfaceHTTPClientImpl) List(ctx context.Context, in *WorkspaceParam, opts ...http.CallOption) (*Workspaces, error) {
	var out Workspaces
	pattern := "/api/v1alpha1/workspace/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkspaceInterfaceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WorkspaceInterfaceHTTPClientImpl) Save(ctx context.Context, in *Workspace, opts ...http.CallOption) (*common.Msg, error) {
	var out common.Msg
	pattern := "/api/v1alpha1/workspace/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkspaceInterfaceSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
