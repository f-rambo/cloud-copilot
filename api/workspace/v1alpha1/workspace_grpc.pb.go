// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/workspace/v1alpha1/workspace.proto

package v1alpha1

import (
	context "context"
	common "github.com/f-rambo/cloud-copilot/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkspaceInterface_Save_FullMethodName = "/workspace.v1alpha1.WorkspaceInterface/Save"
	WorkspaceInterface_Get_FullMethodName  = "/workspace.v1alpha1.WorkspaceInterface/Get"
	WorkspaceInterface_List_FullMethodName = "/workspace.v1alpha1.WorkspaceInterface/List"
)

// WorkspaceInterfaceClient is the client API for WorkspaceInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceInterfaceClient interface {
	Save(ctx context.Context, in *Workspace, opts ...grpc.CallOption) (*common.Msg, error)
	Get(ctx context.Context, in *WorkspaceParam, opts ...grpc.CallOption) (*Workspace, error)
	List(ctx context.Context, in *WorkspaceParam, opts ...grpc.CallOption) (*Workspaces, error)
}

type workspaceInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceInterfaceClient(cc grpc.ClientConnInterface) WorkspaceInterfaceClient {
	return &workspaceInterfaceClient{cc}
}

func (c *workspaceInterfaceClient) Save(ctx context.Context, in *Workspace, opts ...grpc.CallOption) (*common.Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Msg)
	err := c.cc.Invoke(ctx, WorkspaceInterface_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceInterfaceClient) Get(ctx context.Context, in *WorkspaceParam, opts ...grpc.CallOption) (*Workspace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Workspace)
	err := c.cc.Invoke(ctx, WorkspaceInterface_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceInterfaceClient) List(ctx context.Context, in *WorkspaceParam, opts ...grpc.CallOption) (*Workspaces, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Workspaces)
	err := c.cc.Invoke(ctx, WorkspaceInterface_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceInterfaceServer is the server API for WorkspaceInterface service.
// All implementations must embed UnimplementedWorkspaceInterfaceServer
// for forward compatibility.
type WorkspaceInterfaceServer interface {
	Save(context.Context, *Workspace) (*common.Msg, error)
	Get(context.Context, *WorkspaceParam) (*Workspace, error)
	List(context.Context, *WorkspaceParam) (*Workspaces, error)
	mustEmbedUnimplementedWorkspaceInterfaceServer()
}

// UnimplementedWorkspaceInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkspaceInterfaceServer struct{}

func (UnimplementedWorkspaceInterfaceServer) Save(context.Context, *Workspace) (*common.Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedWorkspaceInterfaceServer) Get(context.Context, *WorkspaceParam) (*Workspace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkspaceInterfaceServer) List(context.Context, *WorkspaceParam) (*Workspaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkspaceInterfaceServer) mustEmbedUnimplementedWorkspaceInterfaceServer() {}
func (UnimplementedWorkspaceInterfaceServer) testEmbeddedByValue()                            {}

// UnsafeWorkspaceInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceInterfaceServer will
// result in compilation errors.
type UnsafeWorkspaceInterfaceServer interface {
	mustEmbedUnimplementedWorkspaceInterfaceServer()
}

func RegisterWorkspaceInterfaceServer(s grpc.ServiceRegistrar, srv WorkspaceInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedWorkspaceInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkspaceInterface_ServiceDesc, srv)
}

func _WorkspaceInterface_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceInterfaceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceInterface_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceInterfaceServer).Save(ctx, req.(*Workspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceInterface_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceInterfaceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceInterface_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceInterfaceServer).Get(ctx, req.(*WorkspaceParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceInterface_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceInterfaceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceInterface_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceInterfaceServer).List(ctx, req.(*WorkspaceParam))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceInterface_ServiceDesc is the grpc.ServiceDesc for WorkspaceInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workspace.v1alpha1.WorkspaceInterface",
	HandlerType: (*WorkspaceInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _WorkspaceInterface_Save_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WorkspaceInterface_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WorkspaceInterface_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/workspace/v1alpha1/workspace.proto",
}
