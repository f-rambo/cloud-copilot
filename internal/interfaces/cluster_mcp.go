// Code generated by protoc-gen-mcpgo. DO NOT EDIT.
// source: api/cluster/v1alpha1/cluster.proto

package interfaces

import (
	context "context"
	json "encoding/json"
	mcp "github.com/mark3labs/mcp-go/mcp"
	server "github.com/mark3labs/mcp-go/server"
)

import (
	"github.com/f-rambo/cloud-copilot/api/cluster/v1alpha1"
)

type ClusterInterfaceMcpService struct {
	ClusterInterface *ClusterInterface
}

func NewClusterInterfaceMcpService(clusterInterface *ClusterInterface) *ClusterInterfaceMcpService {
	return &ClusterInterfaceMcpService{
		ClusterInterface: clusterInterface,
	}
}

func (c *ClusterInterfaceMcpService) ClusterMcp() *server.MCPServer {
	ser := server.NewMCPServer("ClusterInterface", "0.0.1",
		server.WithToolCapabilities(false), // Assuming default, make configurable if needed
	)

	// Add tool for Get
	tool_Get := mcp.NewTool("Get",
		mcp.WithDescription("Get cluster by id."),
		mcp.WithNumber("id",
			mcp.Description("cluster id required"),
		), // Close WithNumber
	) // Close NewTool
	ser.AddTool(tool_Get, c.Get)

	// Add tool for GetClustersByIds
	tool_GetClustersByIds := mcp.NewTool("GetClustersByIds",
		mcp.WithDescription("Get clusters by ids."),
		mcp.WithNumber("ids",
			mcp.Description("cluster ids required"),
		), // Close WithNumber
	) // Close NewTool
	ser.AddTool(tool_GetClustersByIds, c.GetClustersByIds)

	// Add tool for Save
	tool_Save := mcp.NewTool("Save",
		mcp.WithDescription("Save cluster."),
		mcp.WithNumber("id",
			mcp.Description("cluster name optional"),
		), // Close WithNumber
		mcp.WithString("name",
			mcp.Description("cluster name required"),
		), // Close WithString
		mcp.WithString("provider",
			mcp.Description("cluster status required 'baremetal' | 'aws' | 'ali_cloud'"),
		), // Close WithString
		mcp.WithString("public_key",
			mcp.Description("public key required"),
		), // Close WithString
		mcp.WithString("private_key",
			mcp.Description("private key required"),
		), // Close WithString
		mcp.WithString("access_id",
			mcp.Description("access id optional"),
		), // Close WithString
		mcp.WithString("access_key",
			mcp.Description("access key optional"),
		), // Close WithString
		mcp.WithString("region",
			mcp.Description("region optional"),
		), // Close WithString
		mcp.WithString("node_username",
			mcp.Description("node username optional"),
		), // Close WithString
		mcp.WithString("node_start_ip",
			mcp.Description("node start ip optional"),
		), // Close WithString
		mcp.WithString("node_end_ip",
			mcp.Description("node end ip optional"),
		), // Close WithString
	) // Close NewTool
	ser.AddTool(tool_Save, c.Save)

	// Add tool for List
	tool_List := mcp.NewTool("List",
		mcp.WithDescription("List returns a list of clusters based on the provided arguments."),
		mcp.WithString("name",
			mcp.Description("cluster name optional"),
		), // Close WithString
		mcp.WithNumber("page",
			mcp.Description("page number, default is 1"),
		), // Close WithNumber
		mcp.WithNumber("page_size",
			mcp.Description("page size, default is 10, max is 100"),
		), // Close WithNumber
	) // Close NewTool
	ser.AddTool(tool_List, c.List)

	// Add tool for Delete
	tool_Delete := mcp.NewTool("Delete",
		mcp.WithDescription("Delete cluster."),
		mcp.WithNumber("id",
			mcp.Description("cluster id required"),
		), // Close WithNumber
	) // Close NewTool
	ser.AddTool(tool_Delete, c.Delete)

	// Add tool for Start
	tool_Start := mcp.NewTool("Start",
		mcp.WithDescription("Start cluster: create cluster and start all nodes"),
		mcp.WithNumber("id",
			mcp.Description("cluster id required"),
		), // Close WithNumber
	) // Close NewTool
	ser.AddTool(tool_Start, c.Start)

	// Add tool for Stop
	tool_Stop := mcp.NewTool("Stop",
		mcp.WithDescription("Stop cluster: stop all nodes and delete cluster"),
		mcp.WithNumber("id",
			mcp.Description("cluster id required"),
		), // Close WithNumber
	) // Close NewTool
	ser.AddTool(tool_Stop, c.Stop)

	// Add tool for GetRegions
	tool_GetRegions := mcp.NewTool("GetRegions",
		mcp.WithDescription("Get cluster regions"),
		mcp.WithString("access_id",
			mcp.Description("cluster provider required"),
		), // Close WithString
		mcp.WithString("access_key",
			mcp.Description("cluster access key required"),
		), // Close WithString
		mcp.WithString("provider",
			mcp.Description("cluster provider required 'baremetal' | 'aws' | 'ali_cloud'"),
		), // Close WithString
	) // Close NewTool
	ser.AddTool(tool_GetRegions, c.GetRegions)

	return ser
}

func (c *ClusterInterfaceMcpService) Get(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	args := request.GetRawArguments()
	jsonByte, err := json.Marshal(args)
	if err != nil {
		return nil, err
	}

	var requestArgs v1alpha1.ClusterIdArgs
	err = json.Unmarshal(jsonByte, &requestArgs)
	if err != nil {
		return nil, err
	}

	res, err := c.ClusterInterface.Get(ctx, &requestArgs)
	if err != nil {
		return nil, err
	}

	resJson, err := json.Marshal(&res)
	if err != nil {
		return nil, err
	}
	return mcp.NewToolResultText(string(resJson)), nil
}

func (c *ClusterInterfaceMcpService) GetClustersByIds(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	args := request.GetRawArguments()
	jsonByte, err := json.Marshal(args)
	if err != nil {
		return nil, err
	}

	var requestArgs v1alpha1.ClusterIdsArgs
	err = json.Unmarshal(jsonByte, &requestArgs)
	if err != nil {
		return nil, err
	}

	res, err := c.ClusterInterface.GetClustersByIds(ctx, &requestArgs)
	if err != nil {
		return nil, err
	}

	resJson, err := json.Marshal(&res)
	if err != nil {
		return nil, err
	}
	return mcp.NewToolResultText(string(resJson)), nil
}

func (c *ClusterInterfaceMcpService) Save(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	args := request.GetRawArguments()
	jsonByte, err := json.Marshal(args)
	if err != nil {
		return nil, err
	}

	var requestArgs v1alpha1.ClusterSaveArgs
	err = json.Unmarshal(jsonByte, &requestArgs)
	if err != nil {
		return nil, err
	}

	res, err := c.ClusterInterface.Save(ctx, &requestArgs)
	if err != nil {
		return nil, err
	}

	resJson, err := json.Marshal(&res)
	if err != nil {
		return nil, err
	}
	return mcp.NewToolResultText(string(resJson)), nil
}

func (c *ClusterInterfaceMcpService) List(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	args := request.GetRawArguments()
	jsonByte, err := json.Marshal(args)
	if err != nil {
		return nil, err
	}

	var requestArgs v1alpha1.ClusterListArgs
	err = json.Unmarshal(jsonByte, &requestArgs)
	if err != nil {
		return nil, err
	}

	res, err := c.ClusterInterface.List(ctx, &requestArgs)
	if err != nil {
		return nil, err
	}

	resJson, err := json.Marshal(&res)
	if err != nil {
		return nil, err
	}
	return mcp.NewToolResultText(string(resJson)), nil
}

func (c *ClusterInterfaceMcpService) Delete(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	args := request.GetRawArguments()
	jsonByte, err := json.Marshal(args)
	if err != nil {
		return nil, err
	}

	var requestArgs v1alpha1.ClusterIdArgs
	err = json.Unmarshal(jsonByte, &requestArgs)
	if err != nil {
		return nil, err
	}

	res, err := c.ClusterInterface.Delete(ctx, &requestArgs)
	if err != nil {
		return nil, err
	}

	resJson, err := json.Marshal(&res)
	if err != nil {
		return nil, err
	}
	return mcp.NewToolResultText(string(resJson)), nil
}

func (c *ClusterInterfaceMcpService) Start(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	args := request.GetRawArguments()
	jsonByte, err := json.Marshal(args)
	if err != nil {
		return nil, err
	}

	var requestArgs v1alpha1.ClusterIdArgs
	err = json.Unmarshal(jsonByte, &requestArgs)
	if err != nil {
		return nil, err
	}

	res, err := c.ClusterInterface.Start(ctx, &requestArgs)
	if err != nil {
		return nil, err
	}

	resJson, err := json.Marshal(&res)
	if err != nil {
		return nil, err
	}
	return mcp.NewToolResultText(string(resJson)), nil
}

func (c *ClusterInterfaceMcpService) Stop(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	args := request.GetRawArguments()
	jsonByte, err := json.Marshal(args)
	if err != nil {
		return nil, err
	}

	var requestArgs v1alpha1.ClusterIdArgs
	err = json.Unmarshal(jsonByte, &requestArgs)
	if err != nil {
		return nil, err
	}

	res, err := c.ClusterInterface.Stop(ctx, &requestArgs)
	if err != nil {
		return nil, err
	}

	resJson, err := json.Marshal(&res)
	if err != nil {
		return nil, err
	}
	return mcp.NewToolResultText(string(resJson)), nil
}

func (c *ClusterInterfaceMcpService) GetRegions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	args := request.GetRawArguments()
	jsonByte, err := json.Marshal(args)
	if err != nil {
		return nil, err
	}

	var requestArgs v1alpha1.ClusterRegionArgs
	err = json.Unmarshal(jsonByte, &requestArgs)
	if err != nil {
		return nil, err
	}

	res, err := c.ClusterInterface.GetRegions(ctx, &requestArgs)
	if err != nil {
		return nil, err
	}

	resJson, err := json.Marshal(&res)
	if err != nil {
		return nil, err
	}
	return mcp.NewToolResultText(string(resJson)), nil
}
