// Code generated by MockGen. DO NOT EDIT.
// Source: internal/biz/project.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	biz "github.com/f-rambo/ocean/internal/biz"
	gomock "github.com/golang/mock/gomock"
)

// MockProjectRepo is a mock of ProjectRepo interface.
type MockProjectRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepoMockRecorder
}

// MockProjectRepoMockRecorder is the mock recorder for MockProjectRepo.
type MockProjectRepoMockRecorder struct {
	mock *MockProjectRepo
}

// NewMockProjectRepo creates a new mock instance.
func NewMockProjectRepo(ctrl *gomock.Controller) *MockProjectRepo {
	mock := &MockProjectRepo{ctrl: ctrl}
	mock.recorder = &MockProjectRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepo) EXPECT() *MockProjectRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProjectRepo) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectRepo)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockProjectRepo) Get(arg0 context.Context, arg1 int64) (*biz.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*biz.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProjectRepoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProjectRepo)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockProjectRepo) List(arg0 context.Context, arg1 int64) ([]*biz.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*biz.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProjectRepoMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProjectRepo)(nil).List), arg0, arg1)
}

// ListByIds mocks base method.
func (m *MockProjectRepo) ListByIds(arg0 context.Context, arg1 []int64) ([]*biz.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByIds", arg0, arg1)
	ret0, _ := ret[0].([]*biz.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByIds indicates an expected call of ListByIds.
func (mr *MockProjectRepoMockRecorder) ListByIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByIds", reflect.TypeOf((*MockProjectRepo)(nil).ListByIds), arg0, arg1)
}

// Save mocks base method.
func (m *MockProjectRepo) Save(arg0 context.Context, arg1 *biz.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProjectRepoMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProjectRepo)(nil).Save), arg0, arg1)
}

// MockClusterPorjectRepo is a mock of ClusterPorjectRepo interface.
type MockClusterPorjectRepo struct {
	ctrl     *gomock.Controller
	recorder *MockClusterPorjectRepoMockRecorder
}

// MockClusterPorjectRepoMockRecorder is the mock recorder for MockClusterPorjectRepo.
type MockClusterPorjectRepoMockRecorder struct {
	mock *MockClusterPorjectRepo
}

// NewMockClusterPorjectRepo creates a new mock instance.
func NewMockClusterPorjectRepo(ctrl *gomock.Controller) *MockClusterPorjectRepo {
	mock := &MockClusterPorjectRepo{ctrl: ctrl}
	mock.recorder = &MockClusterPorjectRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterPorjectRepo) EXPECT() *MockClusterPorjectRepoMockRecorder {
	return m.recorder
}

// CreateNamespace mocks base method.
func (m *MockClusterPorjectRepo) CreateNamespace(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockClusterPorjectRepoMockRecorder) CreateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockClusterPorjectRepo)(nil).CreateNamespace), arg0, arg1)
}

// GetNamespaces mocks base method.
func (m *MockClusterPorjectRepo) GetNamespaces(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockClusterPorjectRepoMockRecorder) GetNamespaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockClusterPorjectRepo)(nil).GetNamespaces), arg0)
}
