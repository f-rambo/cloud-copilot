// Code generated by MockGen. DO NOT EDIT.
// Source: internal/biz/app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	biz "github.com/f-rambo/ocean/internal/biz"
	gomock "github.com/golang/mock/gomock"
)

// MockAppRepo is a mock of AppRepo interface.
type MockAppRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAppRepoMockRecorder
}

// MockAppRepoMockRecorder is the mock recorder for MockAppRepo.
type MockAppRepoMockRecorder struct {
	mock *MockAppRepo
}

// NewMockAppRepo creates a new mock instance.
func NewMockAppRepo(ctrl *gomock.Controller) *MockAppRepo {
	mock := &MockAppRepo{ctrl: ctrl}
	mock.recorder = &MockAppRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRepo) EXPECT() *MockAppRepoMockRecorder {
	return m.recorder
}

// CreateAppType mocks base method.
func (m *MockAppRepo) CreateAppType(ctx context.Context, appType *biz.AppType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppType", ctx, appType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAppType indicates an expected call of CreateAppType.
func (mr *MockAppRepoMockRecorder) CreateAppType(ctx, appType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppType", reflect.TypeOf((*MockAppRepo)(nil).CreateAppType), ctx, appType)
}

// Delete mocks base method.
func (m *MockAppRepo) Delete(ctx context.Context, appID, versionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, appID, versionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAppRepoMockRecorder) Delete(ctx, appID, versionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppRepo)(nil).Delete), ctx, appID, versionID)
}

// DeleteAppType mocks base method.
func (m *MockAppRepo) DeleteAppType(ctx context.Context, appTypeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppType", ctx, appTypeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppType indicates an expected call of DeleteAppType.
func (mr *MockAppRepoMockRecorder) DeleteAppType(ctx, appTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppType", reflect.TypeOf((*MockAppRepo)(nil).DeleteAppType), ctx, appTypeID)
}

// DeleteDeployApp mocks base method.
func (m *MockAppRepo) DeleteDeployApp(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployApp", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployApp indicates an expected call of DeleteDeployApp.
func (mr *MockAppRepoMockRecorder) DeleteDeployApp(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployApp", reflect.TypeOf((*MockAppRepo)(nil).DeleteDeployApp), ctx, id)
}

// DeleteRepo mocks base method.
func (m *MockAppRepo) DeleteRepo(ctx context.Context, helmRepoID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepo", ctx, helmRepoID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepo indicates an expected call of DeleteRepo.
func (mr *MockAppRepoMockRecorder) DeleteRepo(ctx, helmRepoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepo", reflect.TypeOf((*MockAppRepo)(nil).DeleteRepo), ctx, helmRepoID)
}

// DeployAppList mocks base method.
func (m *MockAppRepo) DeployAppList(ctx context.Context, appDeployedReq biz.DeployApp, page, pageSuze int32) ([]*biz.DeployApp, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployAppList", ctx, appDeployedReq, page, pageSuze)
	ret0, _ := ret[0].([]*biz.DeployApp)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeployAppList indicates an expected call of DeployAppList.
func (mr *MockAppRepoMockRecorder) DeployAppList(ctx, appDeployedReq, page, pageSuze interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployAppList", reflect.TypeOf((*MockAppRepo)(nil).DeployAppList), ctx, appDeployedReq, page, pageSuze)
}

// Get mocks base method.
func (m *MockAppRepo) Get(ctx context.Context, appID int64) (*biz.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, appID)
	ret0, _ := ret[0].(*biz.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAppRepoMockRecorder) Get(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppRepo)(nil).Get), ctx, appID)
}

// GetByName mocks base method.
func (m *MockAppRepo) GetByName(ctx context.Context, name string) (*biz.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*biz.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockAppRepoMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockAppRepo)(nil).GetByName), ctx, name)
}

// GetDeployApp mocks base method.
func (m *MockAppRepo) GetDeployApp(ctx context.Context, id int64) (*biz.DeployApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployApp", ctx, id)
	ret0, _ := ret[0].(*biz.DeployApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployApp indicates an expected call of GetDeployApp.
func (mr *MockAppRepoMockRecorder) GetDeployApp(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployApp", reflect.TypeOf((*MockAppRepo)(nil).GetDeployApp), ctx, id)
}

// GetRepo mocks base method.
func (m *MockAppRepo) GetRepo(ctx context.Context, helmRepoID int64) (*biz.AppHelmRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", ctx, helmRepoID)
	ret0, _ := ret[0].(*biz.AppHelmRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockAppRepoMockRecorder) GetRepo(ctx, helmRepoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockAppRepo)(nil).GetRepo), ctx, helmRepoID)
}

// GetRepoByName mocks base method.
func (m *MockAppRepo) GetRepoByName(ctx context.Context, repoName string) (*biz.AppHelmRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByName", ctx, repoName)
	ret0, _ := ret[0].(*biz.AppHelmRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByName indicates an expected call of GetRepoByName.
func (mr *MockAppRepoMockRecorder) GetRepoByName(ctx, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByName", reflect.TypeOf((*MockAppRepo)(nil).GetRepoByName), ctx, repoName)
}

// List mocks base method.
func (m *MockAppRepo) List(ctx context.Context, appReq *biz.App, page, pageSize int32) ([]*biz.App, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, appReq, page, pageSize)
	ret0, _ := ret[0].([]*biz.App)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockAppRepoMockRecorder) List(ctx, appReq, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppRepo)(nil).List), ctx, appReq, page, pageSize)
}

// ListAppType mocks base method.
func (m *MockAppRepo) ListAppType(ctx context.Context) ([]*biz.AppType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppType", ctx)
	ret0, _ := ret[0].([]*biz.AppType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppType indicates an expected call of ListAppType.
func (mr *MockAppRepoMockRecorder) ListAppType(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppType", reflect.TypeOf((*MockAppRepo)(nil).ListAppType), ctx)
}

// ListRepo mocks base method.
func (m *MockAppRepo) ListRepo(ctx context.Context) ([]*biz.AppHelmRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepo", ctx)
	ret0, _ := ret[0].([]*biz.AppHelmRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepo indicates an expected call of ListRepo.
func (mr *MockAppRepoMockRecorder) ListRepo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepo", reflect.TypeOf((*MockAppRepo)(nil).ListRepo), ctx)
}

// Save mocks base method.
func (m *MockAppRepo) Save(arg0 context.Context, arg1 *biz.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAppRepoMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAppRepo)(nil).Save), arg0, arg1)
}

// SaveDeployApp mocks base method.
func (m *MockAppRepo) SaveDeployApp(ctx context.Context, appDeployed *biz.DeployApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDeployApp", ctx, appDeployed)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDeployApp indicates an expected call of SaveDeployApp.
func (mr *MockAppRepoMockRecorder) SaveDeployApp(ctx, appDeployed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDeployApp", reflect.TypeOf((*MockAppRepo)(nil).SaveDeployApp), ctx, appDeployed)
}

// SaveRepo mocks base method.
func (m *MockAppRepo) SaveRepo(ctx context.Context, helmRepo *biz.AppHelmRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRepo", ctx, helmRepo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRepo indicates an expected call of SaveRepo.
func (mr *MockAppRepoMockRecorder) SaveRepo(ctx, helmRepo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRepo", reflect.TypeOf((*MockAppRepo)(nil).SaveRepo), ctx, helmRepo)
}

// MockSailorRepo is a mock of SailorRepo interface.
type MockSailorRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSailorRepoMockRecorder
}

// MockSailorRepoMockRecorder is the mock recorder for MockSailorRepo.
type MockSailorRepoMockRecorder struct {
	mock *MockSailorRepo
}

// NewMockSailorRepo creates a new mock instance.
func NewMockSailorRepo(ctrl *gomock.Controller) *MockSailorRepo {
	mock := &MockSailorRepo{ctrl: ctrl}
	mock.recorder = &MockSailorRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSailorRepo) EXPECT() *MockSailorRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSailorRepo) Create(arg0 context.Context, arg1 *biz.DeployApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSailorRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSailorRepo)(nil).Create), arg0, arg1)
}

// MockAppRuntime is a mock of AppRuntime interface.
type MockAppRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockAppRuntimeMockRecorder
}

// MockAppRuntimeMockRecorder is the mock recorder for MockAppRuntime.
type MockAppRuntimeMockRecorder struct {
	mock *MockAppRuntime
}

// NewMockAppRuntime creates a new mock instance.
func NewMockAppRuntime(ctrl *gomock.Controller) *MockAppRuntime {
	mock := &MockAppRuntime{ctrl: ctrl}
	mock.recorder = &MockAppRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRuntime) EXPECT() *MockAppRuntimeMockRecorder {
	return m.recorder
}

// GetAppsReouces mocks base method.
func (m *MockAppRuntime) GetAppsReouces(arg0 context.Context, arg1 *biz.DeployApp) ([]*biz.AppDeployedResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppsReouces", arg0, arg1)
	ret0, _ := ret[0].([]*biz.AppDeployedResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsReouces indicates an expected call of GetAppsReouces.
func (mr *MockAppRuntimeMockRecorder) GetAppsReouces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsReouces", reflect.TypeOf((*MockAppRuntime)(nil).GetAppsReouces), arg0, arg1)
}

// GetNetResouces mocks base method.
func (m *MockAppRuntime) GetNetResouces(arg0 context.Context, arg1 *biz.DeployApp) ([]*biz.AppDeployedResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetResouces", arg0, arg1)
	ret0, _ := ret[0].([]*biz.AppDeployedResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetResouces indicates an expected call of GetNetResouces.
func (mr *MockAppRuntimeMockRecorder) GetNetResouces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetResouces", reflect.TypeOf((*MockAppRuntime)(nil).GetNetResouces), arg0, arg1)
}

// GetPodResources mocks base method.
func (m *MockAppRuntime) GetPodResources(arg0 context.Context, arg1 *biz.DeployApp) ([]*biz.AppDeployedResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodResources", arg0, arg1)
	ret0, _ := ret[0].([]*biz.AppDeployedResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodResources indicates an expected call of GetPodResources.
func (mr *MockAppRuntimeMockRecorder) GetPodResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodResources", reflect.TypeOf((*MockAppRuntime)(nil).GetPodResources), arg0, arg1)
}

// MockAppConstruct is a mock of AppConstruct interface.
type MockAppConstruct struct {
	ctrl     *gomock.Controller
	recorder *MockAppConstructMockRecorder
}

// MockAppConstructMockRecorder is the mock recorder for MockAppConstruct.
type MockAppConstructMockRecorder struct {
	mock *MockAppConstruct
}

// NewMockAppConstruct creates a new mock instance.
func NewMockAppConstruct(ctrl *gomock.Controller) *MockAppConstruct {
	mock := &MockAppConstruct{ctrl: ctrl}
	mock.recorder = &MockAppConstructMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppConstruct) EXPECT() *MockAppConstructMockRecorder {
	return m.recorder
}

// AddAppRepo mocks base method.
func (m *MockAppConstruct) AddAppRepo(arg0 context.Context, arg1 *biz.AppHelmRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAppRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAppRepo indicates an expected call of AddAppRepo.
func (mr *MockAppConstructMockRecorder) AddAppRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppRepo", reflect.TypeOf((*MockAppConstruct)(nil).AddAppRepo), arg0, arg1)
}

// DeleteAppChart mocks base method.
func (m *MockAppConstruct) DeleteAppChart(ctx context.Context, app *biz.App, versionId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppChart", ctx, app, versionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppChart indicates an expected call of DeleteAppChart.
func (mr *MockAppConstructMockRecorder) DeleteAppChart(ctx, app, versionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppChart", reflect.TypeOf((*MockAppConstruct)(nil).DeleteAppChart), ctx, app, versionId)
}

// DeployingApp mocks base method.
func (m *MockAppConstruct) DeployingApp(arg0 context.Context, arg1 *biz.DeployApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployingApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployingApp indicates an expected call of DeployingApp.
func (mr *MockAppConstructMockRecorder) DeployingApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployingApp", reflect.TypeOf((*MockAppConstruct)(nil).DeployingApp), arg0, arg1)
}

// GetAppDetailByRepo mocks base method.
func (m *MockAppConstruct) GetAppDetailByRepo(ctx context.Context, apprepo *biz.AppHelmRepo, appName, version string) (*biz.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppDetailByRepo", ctx, apprepo, appName, version)
	ret0, _ := ret[0].(*biz.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppDetailByRepo indicates an expected call of GetAppDetailByRepo.
func (mr *MockAppConstructMockRecorder) GetAppDetailByRepo(ctx, apprepo, appName, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppDetailByRepo", reflect.TypeOf((*MockAppConstruct)(nil).GetAppDetailByRepo), ctx, apprepo, appName, version)
}

// GetAppVersionChartInfomation mocks base method.
func (m *MockAppConstruct) GetAppVersionChartInfomation(arg0 context.Context, arg1 *biz.AppVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppVersionChartInfomation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAppVersionChartInfomation indicates an expected call of GetAppVersionChartInfomation.
func (mr *MockAppConstructMockRecorder) GetAppVersionChartInfomation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppVersionChartInfomation", reflect.TypeOf((*MockAppConstruct)(nil).GetAppVersionChartInfomation), arg0, arg1)
}

// GetAppsByRepo mocks base method.
func (m *MockAppConstruct) GetAppsByRepo(arg0 context.Context, arg1 *biz.AppHelmRepo) ([]*biz.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppsByRepo", arg0, arg1)
	ret0, _ := ret[0].([]*biz.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsByRepo indicates an expected call of GetAppsByRepo.
func (mr *MockAppConstructMockRecorder) GetAppsByRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsByRepo", reflect.TypeOf((*MockAppConstruct)(nil).GetAppsByRepo), arg0, arg1)
}

// UnDeployingApp mocks base method.
func (m *MockAppConstruct) UnDeployingApp(arg0 context.Context, arg1 *biz.DeployApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnDeployingApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnDeployingApp indicates an expected call of UnDeployingApp.
func (mr *MockAppConstructMockRecorder) UnDeployingApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnDeployingApp", reflect.TypeOf((*MockAppConstruct)(nil).UnDeployingApp), arg0, arg1)
}
