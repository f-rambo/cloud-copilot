// Code generated by MockGen. DO NOT EDIT.
// Source: internal/biz/services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	biz "github.com/f-rambo/ocean/internal/biz"
	gomock "github.com/golang/mock/gomock"
)

// MockServicesRepo is a mock of ServicesRepo interface.
type MockServicesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockServicesRepoMockRecorder
}

// MockServicesRepoMockRecorder is the mock recorder for MockServicesRepo.
type MockServicesRepoMockRecorder struct {
	mock *MockServicesRepo
}

// NewMockServicesRepo creates a new mock instance.
func NewMockServicesRepo(ctrl *gomock.Controller) *MockServicesRepo {
	mock := &MockServicesRepo{ctrl: ctrl}
	mock.recorder = &MockServicesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicesRepo) EXPECT() *MockServicesRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServicesRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServicesRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServicesRepo)(nil).Delete), ctx, id)
}

// DeleteWrkflow mocks base method.
func (m *MockServicesRepo) DeleteWrkflow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWrkflow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWrkflow indicates an expected call of DeleteWrkflow.
func (mr *MockServicesRepoMockRecorder) DeleteWrkflow(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWrkflow", reflect.TypeOf((*MockServicesRepo)(nil).DeleteWrkflow), ctx, id)
}

// Get mocks base method.
func (m *MockServicesRepo) Get(ctx context.Context, id int64) (*biz.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*biz.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServicesRepoMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServicesRepo)(nil).Get), ctx, id)
}

// GetServiceCis mocks base method.
func (m *MockServicesRepo) GetServiceCis(ctx context.Context, serviceId int64, page, pageSize int32) ([]*biz.CI, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceCis", ctx, serviceId, page, pageSize)
	ret0, _ := ret[0].([]*biz.CI)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServiceCis indicates an expected call of GetServiceCis.
func (mr *MockServicesRepoMockRecorder) GetServiceCis(ctx, serviceId, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceCis", reflect.TypeOf((*MockServicesRepo)(nil).GetServiceCis), ctx, serviceId, page, pageSize)
}

// GetWorkflow mocks base method.
func (m *MockServicesRepo) GetWorkflow(ctx context.Context, id int64) (*biz.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", ctx, id)
	ret0, _ := ret[0].(*biz.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow.
func (mr *MockServicesRepoMockRecorder) GetWorkflow(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockServicesRepo)(nil).GetWorkflow), ctx, id)
}

// List mocks base method.
func (m *MockServicesRepo) List(ctx context.Context, serviceParam *biz.Service, page, pageSize int) ([]*biz.Service, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, serviceParam, page, pageSize)
	ret0, _ := ret[0].([]*biz.Service)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServicesRepoMockRecorder) List(ctx, serviceParam, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServicesRepo)(nil).List), ctx, serviceParam, page, pageSize)
}

// Save mocks base method.
func (m *MockServicesRepo) Save(ctx context.Context, service *biz.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockServicesRepoMockRecorder) Save(ctx, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockServicesRepo)(nil).Save), ctx, service)
}

// SaveWrkflow mocks base method.
func (m *MockServicesRepo) SaveWrkflow(ctx context.Context, workflow *biz.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWrkflow", ctx, workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWrkflow indicates an expected call of SaveWrkflow.
func (mr *MockServicesRepoMockRecorder) SaveWrkflow(ctx, workflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWrkflow", reflect.TypeOf((*MockServicesRepo)(nil).SaveWrkflow), ctx, workflow)
}

// MockWorkflowRepo is a mock of WorkflowRepo interface.
type MockWorkflowRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRepoMockRecorder
}

// MockWorkflowRepoMockRecorder is the mock recorder for MockWorkflowRepo.
type MockWorkflowRepoMockRecorder struct {
	mock *MockWorkflowRepo
}

// NewMockWorkflowRepo creates a new mock instance.
func NewMockWorkflowRepo(ctrl *gomock.Controller) *MockWorkflowRepo {
	mock := &MockWorkflowRepo{ctrl: ctrl}
	mock.recorder = &MockWorkflowRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowRepo) EXPECT() *MockWorkflowRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWorkflowRepo) Create(ctx context.Context, namespace string, workflow *biz.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, namespace, workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWorkflowRepoMockRecorder) Create(ctx, namespace, workflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWorkflowRepo)(nil).Create), ctx, namespace, workflow)
}

// GenerateCIWorkflow mocks base method.
func (m *MockWorkflowRepo) GenerateCIWorkflow(arg0 context.Context, arg1 *biz.Service) (*biz.Workflow, *biz.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCIWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*biz.Workflow)
	ret1, _ := ret[1].(*biz.Workflow)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateCIWorkflow indicates an expected call of GenerateCIWorkflow.
func (mr *MockWorkflowRepoMockRecorder) GenerateCIWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCIWorkflow", reflect.TypeOf((*MockWorkflowRepo)(nil).GenerateCIWorkflow), arg0, arg1)
}
