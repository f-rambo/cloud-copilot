// Code generated by MockGen. DO NOT EDIT.
// Source: internal/biz/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	biz "github.com/f-rambo/ocean/internal/biz"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserRepo) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteUser), ctx, id)
}

// GetUserByBatchID mocks base method.
func (m *MockUserRepo) GetUserByBatchID(ctx context.Context, ids []int64) ([]*biz.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByBatchID", ctx, ids)
	ret0, _ := ret[0].([]*biz.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByBatchID indicates an expected call of GetUserByBatchID.
func (mr *MockUserRepoMockRecorder) GetUserByBatchID(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByBatchID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByBatchID), ctx, ids)
}

// GetUserByID mocks base method.
func (m *MockUserRepo) GetUserByID(ctx context.Context, id int64) (*biz.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*biz.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByID), ctx, id)
}

// GetUserEmail mocks base method.
func (m *MockUserRepo) GetUserEmail(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockUserRepoMockRecorder) GetUserEmail(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockUserRepo)(nil).GetUserEmail), ctx, token)
}

// GetUserInfoByEmail mocks base method.
func (m *MockUserRepo) GetUserInfoByEmail(ctx context.Context, email string) (*biz.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByEmail", ctx, email)
	ret0, _ := ret[0].(*biz.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByEmail indicates an expected call of GetUserInfoByEmail.
func (mr *MockUserRepoMockRecorder) GetUserInfoByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetUserInfoByEmail), ctx, email)
}

// GetUsers mocks base method.
func (m *MockUserRepo) GetUsers(ctx context.Context, username, email string, pageNum, pageSize int) ([]*biz.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, username, email, pageNum, pageSize)
	ret0, _ := ret[0].([]*biz.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserRepoMockRecorder) GetUsers(ctx, username, email, pageNum, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserRepo)(nil).GetUsers), ctx, username, email, pageNum, pageSize)
}

// Save mocks base method.
func (m *MockUserRepo) Save(ctx context.Context, user *biz.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserRepoMockRecorder) Save(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepo)(nil).Save), ctx, user)
}

// SignIn mocks base method.
func (m *MockUserRepo) SignIn(arg0 context.Context, arg1 *biz.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserRepoMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserRepo)(nil).SignIn), arg0, arg1)
}

// MockThirdparty is a mock of Thirdparty interface.
type MockThirdparty struct {
	ctrl     *gomock.Controller
	recorder *MockThirdpartyMockRecorder
}

// MockThirdpartyMockRecorder is the mock recorder for MockThirdparty.
type MockThirdpartyMockRecorder struct {
	mock *MockThirdparty
}

// NewMockThirdparty creates a new mock instance.
func NewMockThirdparty(ctrl *gomock.Controller) *MockThirdparty {
	mock := &MockThirdparty{ctrl: ctrl}
	mock.recorder = &MockThirdpartyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThirdparty) EXPECT() *MockThirdpartyMockRecorder {
	return m.recorder
}

// GetUserEmail mocks base method.
func (m *MockThirdparty) GetUserEmail(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockThirdpartyMockRecorder) GetUserEmail(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockThirdparty)(nil).GetUserEmail), ctx, token)
}
