// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/f-rambo/cloud-copilot/internal/biz"
	"github.com/f-rambo/cloud-copilot/internal/conf"
	"github.com/f-rambo/cloud-copilot/internal/data"
	"github.com/f-rambo/cloud-copilot/internal/interfaces"
	"github.com/f-rambo/cloud-copilot/internal/server"
	"github.com/f-rambo/cloud-copilot/third_package/argoworkflows"
	"github.com/f-rambo/cloud-copilot/third_package/githubapi"
	"github.com/f-rambo/cloud-copilot/third_package/helm"
	"github.com/f-rambo/cloud-copilot/third_package/infrastructure"
	"github.com/f-rambo/cloud-copilot/third_package/kubernetes"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "github.com/joho/godotenv/autoload"
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	clusterData := data.NewClusterRepo(dataData, bootstrap, logger)
	clusterInfrastructure := infrastructure.NewClusterInfrastructure(bootstrap, logger)
	clusterRuntime := kubernetes.NewClusterRuntime(bootstrap, logger)
	clusterUsecase := biz.NewClusterUseCase(bootstrap, clusterData, clusterInfrastructure, clusterRuntime, logger)
	userData := data.NewUserRepo(dataData, bootstrap, logger)
	thirdparty := githubapi.NewUserClient(bootstrap, logger)
	userUseCase := biz.NewUseUser(userData, thirdparty, logger, bootstrap)
	clusterInterface := interfaces.NewClusterInterface(clusterUsecase, userUseCase, bootstrap, logger)
	appData := data.NewAppRepo(dataData, logger)
	appRuntime := kubernetes.NewAppDeployedResource(bootstrap, logger)
	appConstruct := helm.NewAppConstructRepo(bootstrap, logger)
	appUsecase := biz.NewAppUsecase(appData, appRuntime, appConstruct, logger, bootstrap)
	appInterface := interfaces.NewAppInterface(appUsecase, userUseCase, bootstrap, logger)
	servicesData := data.NewServicesRepo(dataData, logger)
	workflowRuntime := argoworkflows.NewWorkflowRepo(bootstrap, logger)
	servicesUseCase := biz.NewServicesUseCase(servicesData, workflowRuntime, logger)
	projectData := data.NewProjectRepo(dataData, bootstrap, logger)
	porjectRuntime := kubernetes.NewProjectClient(bootstrap, logger)
	projectUsecase := biz.NewProjectUseCase(projectData, porjectRuntime, logger, bootstrap)
	servicesInterface := interfaces.NewServicesInterface(servicesUseCase, projectUsecase)
	userInterface := interfaces.NewUserInterface(userUseCase, bootstrap)
	projectInterface := interfaces.NewProjectInterface(projectUsecase, bootstrap, logger)
	autoscaler := interfaces.NewAutoscaler(clusterUsecase, bootstrap, logger)
	grpcServer := server.NewGRPCServer(bootstrap, clusterInterface, appInterface, servicesInterface, userInterface, projectInterface, autoscaler, logger)
	httpServer := server.NewHTTPServer(bootstrap, clusterInterface, appInterface, servicesInterface, userInterface, projectInterface, logger)
	bizBiz := biz.NewBiz(clusterUsecase, appUsecase, servicesUseCase, userUseCase, projectUsecase, bootstrap, logger)
	app := newApp(logger, grpcServer, httpServer, bizBiz)
	return app, func() {
		cleanup()
	}, nil
}
