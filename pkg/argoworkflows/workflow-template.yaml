apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: golang-ci-ocean-
spec:
  arguments:
    parameters:
      - name: name
      - name: repo
      - name: registry
      - name: registry_user
      - name: registry_pwd
      - name: version
      - name: branch
      - name: tag
      - name: custom

  entrypoint: main
  onExit: image

  volumeClaimTemplates:
    - metadata:
        name: work
      spec:
        accessModes: [ ReadWriteOnce ]
        resources:
          requests:
            storage: 1Gi

  templates:
    - name: main
      dag:
        tasks:
          - name: clone
            template: clone
          - name: deps
            template: deps
            dependencies:
              - clone
          - name: build
            template: build
            dependencies:
              - deps

    - name: image
      container:
        volumeMounts:
          - mountPath: /app
            name: work
        image: moby/buildkit:latest
        workingDir: /app
        command: [ sh, -xuce ]
        args: 
          - |
            buildctl --creds {{workflow.parameters.registry_user}}:{{workflow.parameters.registry_pwd}} \
            --registry {{workflow.parameters.registry}} \
            build \
            --frontend dockerfile.v0 \
            --local context=. \
            --local dockerfile=. \
            --output type=image,name={{workflow.parameters.name}}:{{workflow.parameters.version}},push=true

    - name: clone
      container:
        volumeMounts:
          - mountPath: /app
            name: work
        image: bitnami/git:latest
        workingDir: /app
        command: [ sh, -xuce ]
        args:
          - |
            if [ -z "{{workflow.parameters.tag}}" ]
            then
                git clone -v -b "{{workflow.parameters.branch}}" --single-branch --depth 1 "{{workflow.parameters.repo}}" .
            else
                git clone -v -b "{{workflow.parameters.tag}}" --single-branch --depth 1 "{{workflow.parameters.repo}}" .
            fi

    - name: deps
      container:
        image: golang:1.19
        volumeMounts:
          - mountPath: /app
            name: work
        workingDir: /app
        command: [ sh, -xuce ]
        args:
          - |
            make generate 

    - name: build
      container:
        image: golang:1.19
        volumeMounts:
          - mountPath: /app
            name: work
        workingDir: /app
        command: [ sh, -xuce ]
        args:
          - |
            make build
